(* types *)
free c: channel.
free c2: channel.
free s: channel[private].
free s2: channel[private].
type host. (* U, V *)
type key. (* E_U, E_V *)
 (* skU, skV *)
 (* K_i *)
type dhElt.
type exponent. (* x & y *)
type pkID.(*  id(pkU) & id(pkV)  *)
type algorithmID.
type ctxID.

(* Message Types *)
free T1: bitstring. free T4: bitstring.
free T2: bitstring. free T5: bitstring.
free T3: bitstring. free T6: bitstring.

(* AlgorithmIDs *)
free OSCORE: bitstring.
free EDHOC_PSK_Chaining: algorithmID.
free EDHOC: algorithmID.
free EDHOC_PRESHARED: algorithmID.

free empty: key.

type textString.
type byteString.
type hexString.
const emptyTextString: bitstring.
const emptyHexString: bitstring.
const emptyByteString: bitstring. (* KARL: this is input to HKDF_extract, which
                                          takes other input types as well, making
                                          them all bitstring seems simplest.
                                          Further, from a modelling perspective
                                          I don't think we will test any properties
                                          that depends on the encoding so I propse
                                          we use only one emptyString of type
                                          bitstring.
                                  *)

(* Shared Key Encryption *)
fun aeadEncrypt(bitstring, key, bitstring): bitstring.
reduc forall x: bitstring, y: key, aad: bitstring; aeadDecrypt(aeadEncrypt(x, y, aad), y, aad) = x.
reduc forall x: bitstring, y: key, aad: bitstring; decrypt(aeadEncrypt(x, y, aad), y) = x.

(* XOR Encryption
 * WARNING: this is not the full theory of XOR, we need an answer why is this
 *          enough to model the encryption that we do.
 *)
fun xorEncrypt(bitstring, bitstring): bitstring.
reduc forall x:bitstring, y:bitstring; xorDecrypt(xorEncrypt(x,y),x) = y;
      forall x:bitstring, y:bitstring; xorDecrypt(xorEncrypt(x,y),y) = x.

(* Identifier function for the public keys *)
fun idI(key): pkID[private].
fun idR(key): pkID[private].

fun APP_2A(key, key, bitstring, key): bitstring [private].
fun APP_2A'(key, key, bitstring, key): bitstring [private].
fun APP_3A(key, key, bitstring, key): bitstring [private].

fun APP_2S(key, bitstring, key): bitstring [private].
fun APP_2S'(key, bitstring, key): bitstring [private].
fun APP_3S(key, bitstring, key): bitstring [private].


(* Hash function *)
fun hash(bitstring): bitstring.

(* Diffie Hellman *)
const g: dhElt [data].
fun exp(dhElt, exponent): dhElt.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).
fun dhEltToKey(dhElt): key[typeConverter].
fun keyToDhElt(key): dhElt[typeConverter].
fun keyToBitstring(key): bitstring[typeConverter].
fun keyToExp(key): exponent[typeConverter].

(* Signing. First parameter is the additional data. The second is MAC_2 or MAC_3 *)
fun sign(bitstring, exponent): bitstring.
(* def for message recovery: reduc forall x1: bitstring, x2: bitstring, y: skey; verify(sign(x1, x2, y), pk(y)) = x. *)
(* This can be an alternative version for checking the signature in two steps
reduc forall x: bitstring, y: exponent; verifySign(x, sign(x, y), exp(g, y)) = true;
 *)
reduc forall x: bitstring, y: exponent, k: key;
   verifyAEADSign(x, sign((x, aeadEncrypt(emptyHexString, k, x)), y), k, exp(g, y)) = true.


reduc forall x: bitstring, z: key; verifyAEAD(x, aeadEncrypt(emptyHexString, z, x), z) = true.

(* Authentication events Symmetric *)
event startInitiatorS(host, host, key, dhElt).
event startResponderS(host, host, key, dhElt).
event midInitiatorS(host, host, key, dhElt).
event endInitiatorS(host, host, key, dhElt).
event endResponderS(host, host, key, dhElt).

(* Authentication events Asymmetric *)
event startInitiatorA(host, host, dhElt, key, ctxID).
event startResponderA(host, host, dhElt, key, ctxID).
event midInitiatorA(host, host, dhElt).
event endInitiatorA(host, host, dhElt).
event endResponderA(host, host, dhElt).

(* Authentication events Symmetric *)
event agreeHashStart3S(host, host, key, bitstring, key).
event agreeHashStart2S(host, host, key, bitstring, key).

event agreeHashEnd2S(host, host, key, bitstring).
event agreeHashEnd3S(host, host, key, bitstring).

(* Authentication events Asymmetric *)
event agreeHashStart3A(host, host, key, bitstring, key).
event agreeHashStart2A(host, host, key, bitstring, key).

event agreeHashEnd2A(host, host, key, bitstring).
event agreeHashEnd3A(host, host, key, bitstring).

event LTK_Reveal(exponent).
event PSK_Reveal(key).
event SessK2A_Reveal(key, key).
event SessK3A_Reveal(key, key).
event SessK2S_Reveal(key).
event SessK3S_Reveal(key).

(* Methods *)
type method.
const METHOD_STAT:method.
const METHOD_SIG:method.
const METHOD_PSK:method.


(* HKDF
 * Both the extract and expand functions take a salt as first parameter.
 * The second parameter of the extract function is an element from the
 * DH-group (e.g., g^xy).
 * The second parameter of the expand function is a key.
 *)
fun HKDF_extract(bitstring, dhElt): key.
fun HKDF_expand(bitstring, key): key.

(* Intermediate keys ("PRKs"), see Section 3.8 of EDHOC *)
letfun PRK_2e_asym(G_XY: dhElt) = HKDF_extract(emptyByteString, G_XY).
letfun PRK_2e_sym(PSK: key, G_XY: dhElt) = HKDF_extract(keyToBitstring(PSK), G_XY).

letfun PRK_3e2m_sym(PSK: key, G_XY: dhElt) = PRK_2e_sym(PSK, G_XY).
letfun PRK_3e2m_asym(G_XY: dhElt, G_RX: dhElt, methodI: method, methodR: method) =
    if methodR = METHOD_STAT then HKDF_extract(keyToBitstring(PRK_2e_asym(G_XY)), G_RX)
    else PRK_2e_asym(G_XY).
letfun PRK_4x3m_sym(PSK: key, G_XY: dhElt) = PRK_3e2m_sym(PSK, G_XY).
letfun PRK_4x3m_asym(G_XY: dhElt, G_RX: dhElt, G_IY:dhElt, methodI: method, methodR: method) =
    if methodI = METHOD_STAT then HKDF_extract(keyToBitstring(PRK_3e2m_asym(G_XY, G_RX, methodI, methodR)), G_IY)
    else PRK_3e2m_asym(G_XY, G_RX, methodI, methodR).

(* Encryption/Integrity key and IV derivations (see Section 3.8) *)
type label.
const LABEL_K_2m: label.
const LABEL_IV_2m: label.   (* for completeness only, not used in model *)
const LABEL_K_2e: label.
const LABEL_IV_2ae: label.  (* for completeness only, not used in model *)
const LABEL_K_3m: label.
const LABEL_IV_3m: label.   (* for completeness only, not used in model *)
const LABEL_K_3ae: label.
const LABEL_IV_3ae: label.  (* for completeness only, not used in model *)
(* KARL: spec lists IV_2ae twice, but it should probably be IV_3ae the last time *)

(* The key length for the AEAD transforms are defined by the cipher suite.
 * That is, there each single code-point corresponds to a fixed set algorithms
 * and key lengths (see Section 3.4). Therefore, we can model both selected
 * AEAD and selected key-length with a single term: the key length is
 * implicit from the identifier of the AEAD.
 *
 * We probably will have to model cipher suites as well later on.
 * Some cipher suites have the same AEAD so we cannot use the cipher suite ID
 * as input to these key derivations: there could be collisions on AEAD
 * identifiers even if the cipher suite identifiers differ.
 *
 *)
const aead0: bitstring.      (* There are only two AEADs defined *)
const aead1: bitstring.

(* The info structure is modeled by the tuple (ALGO, TH, LABEL).
 * Note that the lenth is excluded because it is implied by the
 * algoID (see comment on type algoID above).
 *
 * The AEADs take both a key and an IV as input. Both the key and
 * the IV are derived by applying the KDF to a PRK, but with different labels.
 * Becuase of this, both of them are essentially keys and we can view the pair
 * as a single long key. Further, because we don't
 * take key-lengths into account in the symbolic model, we may just as well
 * model the pair as a single object. In fact, to simplify the model even more,
 * may even ignore the IVs, and this is what we do.
 *
 * Macro parameter names indicate which key and TH to use.
 *)
letfun KDF(PRK: key, th: bitstring, l: label, aeadId: bitstring) =
    HKDF_expand((aeadId, th, l), PRK).

letfun K_2e_KDF(PRK_2e: key, TH_2: bitstring, aeadId: bitstring) =
    KDF(PRK_2e, TH_2, LABEL_K_2e, aeadId).

letfun K_2m_KDF(PRK_3e2m: key, TH_2: bitstring, aeadId: bitstring) =
    KDF(PRK_3e2m, TH_2, LABEL_K_2m, aeadId).

letfun K_3ae_KDF(PRK_3e2m: key, TH_3: bitstring, aeadId: bitstring) =
    KDF(PRK_3e2m, TH_3, LABEL_K_3ae, aeadId).

letfun K_3m_KDF(PRK_4x3m: key, TH_3: bitstring, aeadId: bitstring) =
    KDF(PRK_4x3m, TH_3, LABEL_K_3m, aeadId).

(* Key exporter interface (section 3.8.1).
 * The LABEL and the LENGTH are values supplied by the application.
 *)
letfun EDHOC_exporter(PRK_4x3m: key, TH_4: bitstring, l: label, length: bitstring) =
    KDF(PRK_4x3m, TH_4, l, length).


(* Event and query helper functions *)
const dummyDhElt: dhElt.
