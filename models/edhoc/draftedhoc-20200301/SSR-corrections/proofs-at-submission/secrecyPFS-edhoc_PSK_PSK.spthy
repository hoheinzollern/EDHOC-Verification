maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ...>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (∃ tid u v sk #i #j.   (K( sk ) @ #i) ∧ (CommitI( tid, u, v, sk ) @ #j)  ∧   (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧   (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥))  ∥ (∃ tid u v sk #i #j.   (K( sk ) @ #i) ∧ (CommitR( tid, u, v, sk ) @ #j)  ∧   (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧   (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥))

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 0 (directly): !LTK_PSK( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): !LTK_STAT( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): !LTK_SIG( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): !PK_SIG( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): CommitI( t.1, t.2, t.3, t.4 ) ▶₀ #i
  solved goal nr. 0 (directly):
    StI1_PSK_PSK( t.1, t.2, t.3, t.4, t.5, t.6 ) ▶₀ #i
  solved goal nr. 0 (directly): !KU( ~t.1 ) @ #i
  solved goal nr. 0 (directly):
    StR2_PSK_PSK( t.1, t.2, t.3, t.4, t.5, t.6, t.7, t.8, t.9, t.10,
                  t.11
    ) ▶₀ #i
  solved goal nr. 0 (directly):
    !KU( aeadDecrypt(t.1, t.2, t.3, t.4) ) @ #i
  solved goal nr. 0 (directly):
    !KU( aeadEncrypt(t.1, t.2, t.3, t.4) ) @ #i
  solved goal nr. 0 (directly): !KU( decrypt(t.1, t.2, t.3) ) @ #i
  solved goal nr. 0 (directly): !KU( t.1^t.2 ) @ #i
  solved goal nr. 0 (directly): !KU( fst(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( h(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( hkdfExpand(t.1, t.2) ) @ #i
  solved goal nr. 0 (directly): !PK_STAT( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): !KU( hkdfExtract(t.1, t.2) ) @ #i
  solved goal nr. 0 (directly): !KU( pk(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( sign(t.1, t.2) ) @ #i
  solved goal nr. 0 (directly): !KU( snd(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( verify(t.1, t.2, t.3) ) @ #i
  solved goal nr. 2 (directly):
    !LTK_PSK( <$U.8, $V.8>, ~ltk.8 ) ▶₀ #vr.7
  solved goal nr. 2 (directly):
    !LTK_PSK( <$U.13, $V.13>, ~ltk.13 ) ▶₀ #vr.12
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.16, $V.16>, ~ltk.16 ) ▶₀ #vr.15
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    CommitI( tid.16, u.16, v.16, t.14 ) ▶₀ #vr.15
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.13, u.13, v.13, t.11 ) ▶₀ #vr.12
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    CommitI( tid.10, u.10, v.10, t.8 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    StI1_PSK_PSK( $U.16, ~ltk.16, $V.16, ~xx.16, m1.16, ~tid.16
    ) ▶₀ #vr.15
  solved goal nr. 4 (directly): !LTK_SIG( $A.7, ~t.1 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    CommitI( tid.10, u.10, v.10, t.8 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.13, u.13, v.13, t.11 ) ▶₀ #vr.12
  solved goal nr. 4 (directly):
    StI1_PSK_PSK( $U.10, ~ltk.10, $V.10, ~xx.10, m1.10, ~tid.10
    ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly): !LTK_STAT( $A.7, ~t.1 ) ▶₀ #vr.6
  solved goal nr. 19 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.23
  solved goal nr. 4 (directly):
    !LTK_PSK( <$A.7, $B.7>, ~t.1 ) ▶₀ #vr.6
  solved goal nr. 11 (directly):
    !LTK_PSK( <$U.16, $V.16>, ~ltk.16 ) ▶₀ #vr.24
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    StI1_PSK_PSK( $U.10, ~ltk.10, $V.10, ~xx.10, m1.10, ~tid.10
    ) ▶₀ #vr.9
  solved goal nr. 16 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.22
  solved goal nr. 4 (directly):
    CommitI( tid.16, u.16, v.16, t.14 ) ▶₀ #vr.15
  solved goal nr. 4 (directly):
    CommitI( tid.10, u.10, v.10, t.8 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.10, u.10, v.10, t.8 ) ▶₀ #vr.9
  solved goal nr. 24 (precomputed):
    !KU( h(<$cHash0.10, 
            <'PSK', 'PSK', $cSUITE0.10, gx.10, $U.10, $V.10>, 'g'^~yy.10>)
    ) @ #vk.31
  solved goal nr. 16 (precomputed):
    !KU( h(<$cHash0.10, 
            h(<$cHash0.10, 
               <'PSK', 'PSK', $cSUITE0.24, 'g'^~xx.10, $U.10, $V.10>, gy.10>), 
            aeadEncrypt('emptyStr',
                        hkdfExpand(<$cAEAD0.10, 
                                    h(<$cHash0.10, 
                                       <'PSK', 'PSK', $cSUITE0.24, 'g'^~xx.10, $U.10, $V.10>, gy.10
                                      >), 
                                    'K_2ae'>,
                                   hkdfExtract(~ltk.10, z.10)),
                        h(<$cHash0.10, 
                           <'PSK', 'PSK', $cSUITE0.24, 'g'^~xx.10, $U.10, $V.10>, gy.10>),
                        $cAEAD0.10), 
            'emptyStr'>)
    ) @ #vk.21
  solved goal nr. 25 (precomputed):
    !KU( h(<$cHash0.10, 
            <'PSK', 'PSK', $cSUITE0.24, 'g'^~xx.10, $U.10, $V.10>, gy.10>)
    ) @ #vk.39
  solved goal nr. 0 (directly):
     (∃ tid u v sk #i #j.
       (K( sk ) @ #i) ∧ (CommitI( tid, u, v, sk ) @ #j)
      ∧
       (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧
       (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥))  ∥
     (∃ tid u v sk #i #j.
       (K( sk ) @ #i) ∧ (CommitR( tid, u, v, sk ) @ #j)
      ∧
       (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧
       (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥))
  solved goal nr. 1 (directly): K( sk.3 ) @ #i.4
  solved goal nr. 2 (directly): CommitI( tid, u.1, v.2, sk.3 ) @ #j.5
  solved goal nr. 1 (directly): K( sk.3 ) @ #i.4
  solved goal nr. 2 (directly): CommitR( tid, u.1, v.2, sk.3 ) @ #j.5
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (last(#j))  ∥ (last(#i))  ∥ (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #j))  ∥ (∃ #l. (SKRev( sk ) @ #l) ∧ ¬(last(#l)))
1: StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,              ~tid, m1, m2) ▶₀ #j
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>),                              'K_3ae'>,                            prk_3e2m),                 h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 10 (directly):
     (last(#j))  ∥ (last(#i))  ∥
     (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #j))  ∥
     (∃ #l. (SKRev( sk ) @ #l) ∧ ¬(last(#l)))
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (last(#j))  ∥ (last(#i))  ∥ (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #j))  ∥ (∃ #l. (SKRev( sk ) @ #l) ∧ ¬(last(#l)))
1: StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #j
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, m1, gy>), $cAEAD0)) @ #vk.3
3: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 10 (directly):
     (last(#j))  ∥ (last(#i))  ∥
     (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #j))  ∥
     (∃ #l. (SKRev( sk ) @ #l) ∧ ¬(last(#l)))
  simplified formula:
      "((#last.5 < #l.4) ∨ (#l.4 < #last.5))"
    to
      "#l.4 < #last.5"
  solved goal nr. 12 (simplified):
     (#last.5 < #l.4)  ∥ (#l.4 < #last.5)
  simplified formula:
      "((#l.4 = #j) ∨ (#j < #l.4))"
    to
      "⊥"
  simplified formula:
      "((#last.5 < #l.4) ∨ (#l.4 < #last.5))"
    to
      "#l.4 < #last.5"
  solved goal nr. 13 (simplified): (#l.4 = #j)  ∥ (#j < #l.4)
  solved goal nr. 12 (simplified):
     (#last.5 < #l.4)  ∥ (#l.4 < #last.5)
  simplified formula:
      "((#l.4 = #j) ∨ (#j < #l.4))"
    to
      "⊥"
  solved goal nr. 13 (simplified): (#l.4 = #j)  ∥ (#j < #l.4)
  solved goal nr. 11 (directly): SKRev( sk ) @ #l.4
  solved goal nr. 11 (directly): SKRev( sk ) @ #l.4
  simplified formula:
      "((#last.5 < #l.4) ∨ (#l.4 < #last.5))"
    to
      "#l.4 < #last.5"
  solved goal nr. 12 (simplified):
     (#last.5 < #l.4)  ∥ (#l.4 < #last.5)
  simplified formula:
      "((#last.5 < #l.4) ∨ (#l.4 < #last.5))"
    to
      "#l.4 < #last.5"
  solved goal nr. 12 (simplified):
     (#last.5 < #l.4)  ∥ (#l.4 < #last.5)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #j
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, m1, gy>), $cAEAD0)) @ #vk.3
2: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #j
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, m1, gy>), $cAEAD0)) @ #vk.3
2: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 5 (precomputed):
    StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #j
  solved goal nr. 5 (precomputed):
    StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #j
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                 $cAEAD0)) @ #vk.3
1: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 8 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                                 'K_2ae'>,
                                hkdfExtract(~ltk, sk)),
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),
                     $cAEAD0)
    ) @ #vk.3
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)) @ #vk.6
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, sk))) @ #vk.5
2: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 16 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
    ) @ #vk.6
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy) ) @ #vk.1
1: !KU( 'g'^~xx ) @ #vk.10
2: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 25 (precomputed): !KU( 'g'^(~xx*~yy) ) @ #vk.1
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.16
1: !KU( ~yy ) @ #vk.17
2: !KU( 'g'^~xx ) @ #vk.10
3: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 30 (precomputed): !KU( ~xx ) @ #vk.16
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.14
1: !KU( 'g'^~xx ) @ #vk.10
2: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 28 (precomputed): !KU( ~yy ) @ #vk.14
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.14
1: !KU( 'g'^~xx ) @ #vk.10
2: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 38 (precomputed): !KU( ~xx ) @ #vk.14
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, sk))) @ #vk.7
1: splitEqs(0)
2: !KU( 'g'^~xx ) @ #vk.17

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 15 (precomputed):
    !KU( hkdfExpand(<$cAEAD0, 
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                     'K_2ae'>,
                    hkdfExtract(~ltk, sk))
    ) @ #vk.7
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                 $cAEAD0)) @ #vk.3
1: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 8 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                                 'K_2ae'>,
                                hkdfExtract(~ltk, sk)),
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),
                     $cAEAD0)
    ) @ #vk.3
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)) @ #vk.6
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, sk))) @ #vk.5
2: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 16 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
    ) @ #vk.6
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy) ) @ #vk.1
1: !KU( 'g'^~xx ) @ #vk.10
2: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 25 (precomputed): !KU( 'g'^(~xx*~yy) ) @ #vk.1
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.14
1: !KU( 'g'^~xx ) @ #vk.10
2: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.16
1: !KU( ~yy ) @ #vk.17
2: !KU( 'g'^~xx ) @ #vk.10
3: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 38 (precomputed): !KU( ~xx ) @ #vk.14
  solved goal nr. 30 (precomputed): !KU( ~xx ) @ #vk.16
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.14
1: !KU( 'g'^~xx ) @ #vk.10
2: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 28 (precomputed): !KU( ~yy ) @ #vk.14
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, sk))) @ #vk.7
1: splitEqs(0)
2: !KU( 'g'^~xx ) @ #vk.17

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 15 (precomputed):
    !KU( hkdfExpand(<$cAEAD0, 
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                     'K_2ae'>,
                    hkdfExtract(~ltk, sk))
    ) @ #vk.7
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,              ~tid, m1, m2) ▶₀ #j
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>),                              'K_3ae'>,                            prk_3e2m),                 h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 5 (precomputed):
    StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                  ~tid, m1, m2
    ) ▶₀ #j
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,              ~tid, m1, m2) ▶₀ #j
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>),                              'K_3ae'>,                            prk_3e2m),                 h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 5 (precomputed):
    StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                  ~tid, m1, m2
    ) ▶₀ #j
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0,                                                         h(<$cHash0,                                                            <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                            'g'^~yy>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk, sk)),                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                            $cAEAD0),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                 $cAEAD0.1)) @ #vk.3
1: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 8 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0.1, 
                                 h(<$cHash0.1, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0, 
                                                            h(<$cHash0, 
                                                               <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                               >, 
                                                               'g'^~yy>), 
                                                            'K_2ae'>,
                                                           hkdfExtract(~ltk, sk)),
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>),
                                                $cAEAD0), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk, sk)),
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>),
                     $cAEAD0.1)
    ) @ #vk.3
  simplified formula:
      "((last(#vr.17)) ∨
        (last(#i)) ∨
        (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.17)) ∨
        (∃ #l. (SKRev( 'g'^(~yy*~xx.14) ) @ #l) ∧ ¬(last(#l))))"
    to
      "((∃ #l.
          (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.17)) ∨
        (∃ #l. (SKRev( 'g'^(~yy*~xx.14) ) @ #l) ∧ ¬(last(#l))))"
  solved goal nr. 32 (simplified):
     (last(#vr.17))  ∥ (last(#i))  ∥
     (∃ #l.
       (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.17))  ∥
     (∃ #l. (SKRev( 'g'^(~yy*~xx.14) ) @ #l) ∧ ¬(last(#l)))
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.1,         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),         aeadEncrypt('emptyStr',                    hkdfExpand(<$cAEAD0,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 'K_2ae'>,                               hkdfExtract(~ltk, sk)),                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                    $cAEAD0),         'emptyStr'>)) @ #vk.15
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.14
2: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 27 (precomputed):
    !KU( h(<$cHash0.1, 
            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
            aeadEncrypt('emptyStr',
                        hkdfExpand(<$cAEAD0, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    'K_2ae'>,
                                   hkdfExtract(~ltk, sk)),
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                        $cAEAD0), 
            'emptyStr'>)
    ) @ #vk.15
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.2))  ∥ (∃ #l. (SKRev( 'g'^(~xx*~yy) ) @ #l) ∧ ¬(last(#l)))
1: !KU( 'g'^(~xx*~yy) ) @ #vk.1
2: !KU( 'g'^~yy ) @ #vk.15
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.16
4: !KU( 'g'^~xx ) @ #vk.10

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 33 (directly):
     (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.2))  ∥
     (∃ #l. (SKRev( 'g'^(~xx*~yy) ) @ #l) ∧ ¬(last(#l)))
  simplified formula:
      "((#j < #l.17) ∨ (#l.17 < #j))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#j < #l.17)  ∥ (#l.17 < #j)
  simplified formula:
      "((#l.17 = #j) ∨ (#j < #l.17))"
    to
      "⊥"
  solved goal nr. 36 (simplified): (#l.17 = #j)  ∥ (#j < #l.17)
  solved goal nr. 34 (directly): SKRev( 'g'^(~xx*~yy) ) @ #l.17
  simplified formula:
      "((#j < #l.17) ∨ (#l.17 < #j))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#j < #l.17)  ∥ (#l.17 < #j)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)) @ #vk.21
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.16
2: splitEqs(1)
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.22

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 33 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
    ) @ #vk.21
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0,                                                         h(<$cHash0,                                                            <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                            'g'^~yy>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk, sk)),                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                            $cAEAD0),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                 $cAEAD0.1)) @ #vk.3
1: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 8 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0.1, 
                                 h(<$cHash0.1, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0, 
                                                            h(<$cHash0, 
                                                               <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                               >, 
                                                               'g'^~yy>), 
                                                            'K_2ae'>,
                                                           hkdfExtract(~ltk, sk)),
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>),
                                                $cAEAD0), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk, sk)),
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>),
                     $cAEAD0.1)
    ) @ #vk.3
  simplified formula:
      "((last(#vr.17)) ∨
        (last(#i)) ∨
        (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.17)) ∨
        (∃ #l. (SKRev( 'g'^(~yy*~xx.14) ) @ #l) ∧ ¬(last(#l))))"
    to
      "⊤"
  solved goal nr. 32 (simplified):
     (last(#vr.17))  ∥ (last(#i))  ∥
     (∃ #l.
       (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.17))  ∥
     (∃ #l. (SKRev( 'g'^(~yy*~xx.14) ) @ #l) ∧ ¬(last(#l)))
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.1,         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),         aeadEncrypt('emptyStr',                    hkdfExpand(<$cAEAD0,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 'K_2ae'>,                               hkdfExtract(~ltk, sk)),                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                    $cAEAD0),         'emptyStr'>)) @ #vk.15
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.14
2: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 27 (precomputed):
    !KU( h(<$cHash0.1, 
            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
            aeadEncrypt('emptyStr',
                        hkdfExpand(<$cAEAD0, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    'K_2ae'>,
                                   hkdfExtract(~ltk, sk)),
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                        $cAEAD0), 
            'emptyStr'>)
    ) @ #vk.15
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy) ) @ #vk.1
1: !KU( 'g'^~yy ) @ #vk.15
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.16
3: !KU( 'g'^~xx ) @ #vk.10

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 30 (precomputed): !KU( 'g'^(~xx*~yy) ) @ #vk.1
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.19
1: !KU( ~yy ) @ #vk.20
2: !KU( 'g'^~yy ) @ #vk.15
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.16
4: !KU( 'g'^~xx ) @ #vk.10

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 36 (precomputed): !KU( ~xx ) @ #vk.19
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.17
1: !KU( 'g'^~yy ) @ #vk.15
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.16
3: !KU( 'g'^~xx ) @ #vk.10

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 34 (precomputed): !KU( ~yy ) @ #vk.17
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.17
1: !KU( 'g'^~yy ) @ #vk.15
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.16
3: !KU( 'g'^~xx ) @ #vk.10

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 44 (precomputed): !KU( ~xx ) @ #vk.17
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)) @ #vk.21
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.16
2: splitEqs(1)
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.22

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 33 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
    ) @ #vk.21
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, sk) ) @ #vk.23
1: splitEqs(0)
2: !KU( 'g'^~xx ) @ #vk.19

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 36 (precomputed):
    !KU( hkdfExtract(~ltk, sk) ) @ #vk.23
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy) ) @ #vk.4
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 53 (precomputed): !KU( 'g'^(~xx*~yy) ) @ #vk.4
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy) ) @ #vk.4
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 48 (precomputed): !KU( 'g'^(~xx*~yy) ) @ #vk.4
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.21
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.21
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 66 (precomputed): !KU( ~xx ) @ #vk.21
  solved goal nr. 56 (precomputed): !KU( ~yy ) @ #vk.21
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.23
1: !KU( ~yy ) @ #vk.24
2: !KU( 'g'^~xx ) @ #vk.17
3: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 58 (precomputed): !KU( ~xx ) @ #vk.23
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.22
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 51 (precomputed): !KU( ~yy ) @ #vk.22
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.22
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 61 (precomputed): !KU( ~xx ) @ #vk.22
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.24
1: !KU( ~yy ) @ #vk.25
2: !KU( 'g'^~xx ) @ #vk.17
3: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 53 (precomputed): !KU( ~xx ) @ #vk.24
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.25
1: splitEqs(0)
2: !KU( 'g'^~xx ) @ #vk.20

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 42 (precomputed): !KU( ~ltk ) @ #vk.25
  simplified formula:
      "((#vr.27 = #j) ∨ (#j < #vr.27))"
    to
      "⊥"
  solved goal nr. 46 (simplified): (#vr.27 = #j)  ∥ (#j < #vr.27)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, sk) ) @ #vk.23
1: splitEqs(0)
2: !KU( 'g'^~xx ) @ #vk.19

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 36 (precomputed):
    !KU( hkdfExtract(~ltk, sk) ) @ #vk.23
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy) ) @ #vk.4
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 48 (precomputed): !KU( 'g'^(~xx*~yy) ) @ #vk.4
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy) ) @ #vk.4
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 53 (precomputed): !KU( 'g'^(~xx*~yy) ) @ #vk.4
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.21
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 66 (precomputed): !KU( ~xx ) @ #vk.21
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.23
1: !KU( ~yy ) @ #vk.24
2: !KU( 'g'^~xx ) @ #vk.17
3: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 58 (precomputed): !KU( ~xx ) @ #vk.23
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.21
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 56 (precomputed): !KU( ~yy ) @ #vk.21
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.24
1: !KU( ~yy ) @ #vk.25
2: !KU( 'g'^~xx ) @ #vk.17
3: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 53 (precomputed): !KU( ~xx ) @ #vk.24
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.22
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 61 (precomputed): !KU( ~xx ) @ #vk.22
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.22
1: !KU( 'g'^~xx ) @ #vk.17
2: !KU( 'g'^~yy ) @ #vk.5

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 51 (precomputed): !KU( ~yy ) @ #vk.22
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.25
1: splitEqs(0)
2: !KU( 'g'^~xx ) @ #vk.20

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 42 (precomputed): !KU( ~ltk ) @ #vk.25
  simplified formula:
      "((#vr.27 = #j) ∨ (#j < #vr.27))"
    to
      "⊥"
  solved goal nr. 46 (simplified): (#vr.27 = #j)  ∥ (#j < #vr.27)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.19
1: splitEqs(1)
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.23
3: !KU( 'g'^~yy ) @ #vk.26

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 26 (precomputed):
    !KU( hkdfExpand(<$cAEAD0.1, 
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>), 
                     'K_3ae'>,
                    hkdfExtract(~ltk, sk))
    ) @ #vk.19
  simplified formula:
      "((last(#vr.30)) ∨
        (last(#i)) ∨
        (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30)) ∨
        (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l))))"
    to
      "((∃ #l.
          (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30)) ∨
        (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l))))"
  solved goal nr. 81 (simplified):
     (last(#vr.30))  ∥ (last(#i))  ∥
     (∃ #l.
       (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30))  ∥
     (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l)))
  simplified formula:
      "((last(#vr.30)) ∨
        (last(#i)) ∨
        (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30)) ∨
        (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l))))"
    to
      "((∃ #l.
          (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30)) ∨
        (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l))))"
  solved goal nr. 63 (simplified):
     (last(#vr.30))  ∥ (last(#i))  ∥
     (∃ #l.
       (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30))  ∥
     (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l)))
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, sk) ) @ #vk.29
1: splitEqs(1)
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
3: !KU( 'g'^~yy ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 55 (precomputed):
    !KU( hkdfExtract(~ltk, sk) ) @ #vk.29
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.2))  ∥ (∃ #l. (SKRev( 'g'^(~xx*~yy) ) @ #l) ∧ ¬(last(#l)))
1: !KU( 'g'^(~xx*~yy) ) @ #vk.6
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
3: !KU( 'g'^~yy ) @ #vk.26
4: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 64 (directly):
     (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.2))  ∥
     (∃ #l. (SKRev( 'g'^(~xx*~yy) ) @ #l) ∧ ¬(last(#l)))
  simplified formula:
      "((#j < #l.28) ∨ (#l.28 < #j))"
    to
      "⊤"
  solved goal nr. 66 (simplified): (#j < #l.28)  ∥ (#l.28 < #j)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.2))  ∥ (∃ #l. (SKRev( 'g'^(~xx*~yy) ) @ #l) ∧ ¬(last(#l)))
1: !KU( 'g'^(~xx*~yy) ) @ #vk.6
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
3: !KU( 'g'^~yy ) @ #vk.26
4: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 82 (directly):
     (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.2))  ∥
     (∃ #l. (SKRev( 'g'^(~xx*~yy) ) @ #l) ∧ ¬(last(#l)))
  simplified formula:
      "((#l.28 = #j) ∨ (#j < #l.28))"
    to
      "⊥"
  solved goal nr. 67 (simplified): (#l.28 = #j)  ∥ (#j < #l.28)
  simplified formula:
      "((#j < #l.27) ∨ (#l.27 < #j))"
    to
      "⊤"
  solved goal nr. 84 (simplified): (#j < #l.27)  ∥ (#l.27 < #j)
  simplified formula:
      "((#l.27 = #j) ∨ (#j < #l.27))"
    to
      "⊥"
  solved goal nr. 85 (simplified): (#l.27 = #j)  ∥ (#j < #l.27)
  solved goal nr. 65 (directly): SKRev( 'g'^(~xx*~yy) ) @ #l.28
  simplified formula:
      "((#j < #l.28) ∨ (#l.28 < #j))"
    to
      "⊤"
  solved goal nr. 66 (simplified): (#j < #l.28)  ∥ (#l.28 < #j)
  solved goal nr. 83 (directly): SKRev( 'g'^(~xx*~yy) ) @ #l.27
  simplified formula:
      "((#j < #l.27) ∨ (#l.27 < #j))"
    to
      "⊤"
  solved goal nr. 84 (simplified): (#j < #l.27)  ∥ (#l.27 < #j)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.31
1: splitEqs(1)
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.27
3: !KU( 'g'^~yy ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 61 (precomputed): !KU( ~ltk ) @ #vk.31
  simplified formula:
      "((#vr.33 = #j) ∨ (#j < #vr.33))"
    to
      "⊥"
  solved goal nr. 65 (simplified): (#vr.33 = #j)  ∥ (#j < #vr.33)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.19
1: splitEqs(1)
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.23
3: !KU( 'g'^~yy ) @ #vk.26

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 26 (precomputed):
    !KU( hkdfExpand(<$cAEAD0.1, 
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>), 
                     'K_3ae'>,
                    hkdfExtract(~ltk, sk))
    ) @ #vk.19
  simplified formula:
      "((last(#vr.30)) ∨
        (last(#i)) ∨
        (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30)) ∨
        (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l))))"
    to
      "⊤"
  solved goal nr. 81 (simplified):
     (last(#vr.30))  ∥ (last(#i))  ∥
     (∃ #l.
       (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30))  ∥
     (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l)))
  simplified formula:
      "((last(#vr.30)) ∨
        (last(#i)) ∨
        (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30)) ∨
        (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l))))"
    to
      "⊤"
  solved goal nr. 63 (simplified):
     (last(#vr.30))  ∥ (last(#i))  ∥
     (∃ #l.
       (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.30))  ∥
     (∃ #l. (SKRev( 'g'^(~yy*~xx.27) ) @ #l) ∧ ¬(last(#l)))
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, sk) ) @ #vk.29
1: splitEqs(1)
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
3: !KU( 'g'^~yy ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 55 (precomputed):
    !KU( hkdfExtract(~ltk, sk) ) @ #vk.29
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy) ) @ #vk.6
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
2: !KU( 'g'^~yy ) @ #vk.26
3: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 79 (precomputed): !KU( 'g'^(~xx*~yy) ) @ #vk.6
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy) ) @ #vk.6
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
2: !KU( 'g'^~yy ) @ #vk.26
3: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 61 (precomputed): !KU( 'g'^(~xx*~yy) ) @ #vk.6
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.27
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
2: !KU( 'g'^~yy ) @ #vk.26
3: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 93 (precomputed): !KU( ~xx ) @ #vk.27
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.27
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
2: !KU( 'g'^~yy ) @ #vk.26
3: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 83 (precomputed): !KU( ~yy ) @ #vk.27
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.29
1: !KU( ~yy ) @ #vk.30
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
3: !KU( 'g'^~yy ) @ #vk.26
4: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 85 (precomputed): !KU( ~xx ) @ #vk.29
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.28
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
2: !KU( 'g'^~yy ) @ #vk.26
3: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 75 (precomputed): !KU( ~xx ) @ #vk.28
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.30
1: !KU( ~yy ) @ #vk.31
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
3: !KU( 'g'^~yy ) @ #vk.26
4: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 67 (precomputed): !KU( ~xx ) @ #vk.30
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.28
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.24
2: !KU( 'g'^~yy ) @ #vk.26
3: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 65 (precomputed): !KU( ~yy ) @ #vk.28
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.31
1: splitEqs(1)
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.27
3: !KU( 'g'^~yy ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 61 (precomputed): !KU( ~ltk ) @ #vk.31
  simplified formula:
      "((#vr.33 = #j) ∨ (#j < #vr.33))"
    to
      "⊥"
  solved goal nr. 65 (simplified): (#vr.33 = #j)  ∥ (#j < #vr.33)
 OK.

theory edhoc_PSK_PSK_ACTIVE begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, xor
functions: aeadDecrypt/4, aeadEncrypt/4, decrypt/3, fst/1, h/1,
           hkdfExpand/2, hkdfExtract/2, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    aeadDecrypt(key, aeadEncrypt(key, pt, aad, algoId), aad, algoId) = pt,
    decrypt(key, aeadEncrypt(key, pt, aad, algoID), algoId) = pt,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



restriction Eq:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

rule (modulo E) I1_PSK_PSK:
   [ !LTK_PSK( <$U, $V>, ~ltk ), Fr( ~xx ), Fr( ~tid ) ]
  --[ I1( ~tid, $U, $V, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V> ) ]->
   [
   StI1_PSK_PSK( $U, ~ltk, $V, ~xx,
                 <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, ~tid
   ),
   Out( <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R2_PSK_PSK:
   [
   !LTK_PSK( <$U, $V>, ~ltk ), In( <'PSK', 'PSK', $cSUITE0, gx, $U, $V> ),
   Fr( ~yy ), Fr( ~tid )
   ]
  --[
  ExpRunningR( ~tid, $V, gx^~yy ),
  R2( ~tid, $V, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,
      <'g'^~yy, 
       aeadEncrypt('emptyStr',
                   hkdfExpand(<$cAEAD0, 
                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'>,
                              hkdfExtract(~ltk, gx^~yy)),
                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
      >
  )
  ]->
   [
   StR2_PSK_PSK( $U, $V, ~ltk, ~yy, hkdfExtract(~ltk, gx^~yy),
                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                 aeadEncrypt('emptyStr',
                             hkdfExpand(<$cAEAD0, 
                                         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'
                                        >,
                                        hkdfExtract(~ltk, gx^~yy)),
                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0),
                 gx^~yy, ~tid, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,
                 <'g'^~yy, 
                  aeadEncrypt('emptyStr',
                              hkdfExpand(<$cAEAD0, 
                                          h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'
                                         >,
                                         hkdfExtract(~ltk, gx^~yy)),
                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
                 >
   ),
   Out( <'g'^~yy, 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'>,
                                hkdfExtract(~ltk, gx^~yy)),
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
        >
   )
   ]

  /*
  rule (modulo AC) R2_PSK_PSK:
     [
     !LTK_PSK( <$U, $V>, ~ltk ), In( <'PSK', 'PSK', $cSUITE0, gx, $U, $V> ),
     Fr( ~yy ), Fr( ~tid )
     ]
    --[
    ExpRunningR( ~tid, $V, z ),
    R2( ~tid, $V, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,
        <'g'^~yy, 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'>,
                                hkdfExtract(~ltk, z)),
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
        >
    )
    ]->
     [
     StR2_PSK_PSK( $U, $V, ~ltk, ~yy, hkdfExtract(~ltk, z),
                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                   aeadEncrypt('emptyStr',
                               hkdfExpand(<$cAEAD0, 
                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                           'K_2ae'>,
                                          hkdfExtract(~ltk, z)),
                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0),
                   z, ~tid, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,
                   <'g'^~yy, 
                    aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0, 
                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                            'K_2ae'>,
                                           hkdfExtract(~ltk, z)),
                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
                   >
     ),
     Out( <'g'^~yy, 
           aeadEncrypt('emptyStr',
                       hkdfExpand(<$cAEAD0, 
                                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'>,
                                  hkdfExtract(~ltk, z)),
                       h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
          >
     )
     ]
    variants (modulo AC)
    1. ~yy   = ~yy.14
       gx    = gx.15
       z     = gx.15^~yy.14
    
    2. ~yy   = ~yy.16
       gx    = z.19^inv(~yy.16)
       z     = z.19
    
    3. ~yy   = ~yy.68
       gx    = x.126^x.127
       z     = x.126^(~yy.68*x.127)
    
    4. ~yy   = ~yy.69
       gx    = x.128^inv((~yy.69*x.129))
       z     = x.128^inv(x.129)
    
    5. ~yy   = ~yy.69
       gx    = x.128^(x.129*inv(~yy.69))
       z     = x.128^x.129
    
    6. ~yy   = ~yy.70
       gx    = x.129^(x.130*inv((~yy.70*x.131)))
       z     = x.129^(x.130*inv(x.131))
  */

rule (modulo E) I3_PSK_PSK:
   [
   StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ),
   In( <gy, 
        aeadEncrypt('emptyStr',
                    hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                               hkdfExtract(~ltk, gy^~xx)),
                    h(<$cHash0, m1, gy>), $cAEAD0)
       >
   )
   ]
  --[
  ExpCommitI( ~tid, $U, $V, gy^~xx ), CommitI( ~tid, $U, $V, gy^~xx ),
  ExpRunningI( ~tid, $U, $V, gy^~xx ), RunningI( ~tid, $U, $V, gy^~xx ),
  I3( ~tid, $U, $V, m1,
      <gy, 
       aeadEncrypt('emptyStr',
                   hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                              hkdfExtract(~ltk, gy^~xx)),
                   h(<$cHash0, m1, gy>), $cAEAD0)
      >,
      <'emptyStr', 
       aeadEncrypt('emptyStr',
                   hkdfExpand(<$cAEAD0, 
                               h(<$cHash0, h(<$cHash0, m1, gy>), 
                                  aeadEncrypt('emptyStr',
                                              hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                         hkdfExtract(~ltk, gy^~xx)),
                                              h(<$cHash0, m1, gy>), $cAEAD0), 
                                  'emptyStr'>), 
                               'K_3ae'>,
                              hkdfExtract(~ltk, gy^~xx)),
                   h(<$cHash0, h(<$cHash0, m1, gy>), 
                      aeadEncrypt('emptyStr',
                                  hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                             hkdfExtract(~ltk, gy^~xx)),
                                  h(<$cHash0, m1, gy>), $cAEAD0), 
                      'emptyStr'>),
                   $cAEAD0)
      >
  ),
  Eq( '1', '1' )
  ]->
   [
   Out( <'emptyStr', 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, h(<$cHash0, m1, gy>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                           hkdfExtract(~ltk, gy^~xx)),
                                                h(<$cHash0, m1, gy>), $cAEAD0), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk, gy^~xx)),
                     h(<$cHash0, h(<$cHash0, m1, gy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                               hkdfExtract(~ltk, gy^~xx)),
                                    h(<$cHash0, m1, gy>), $cAEAD0), 
                        'emptyStr'>),
                     $cAEAD0)
        >
   )
   ]

  /*
  rule (modulo AC) I3_PSK_PSK:
     [
     StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ),
     In( <gy, 
          aeadEncrypt('emptyStr',
                      hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                 hkdfExtract(~ltk, z)),
                      h(<$cHash0, m1, gy>), $cAEAD0)
         >
     )
     ]
    --[
    ExpCommitI( ~tid, $U, $V, z ), CommitI( ~tid, $U, $V, z ),
    ExpRunningI( ~tid, $U, $V, z ), RunningI( ~tid, $U, $V, z ),
    I3( ~tid, $U, $V, m1,
        <gy, 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                hkdfExtract(~ltk, z)),
                     h(<$cHash0, m1, gy>), $cAEAD0)
        >,
        <'emptyStr', 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, h(<$cHash0, m1, gy>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                           hkdfExtract(~ltk, z)),
                                                h(<$cHash0, m1, gy>), $cAEAD0), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk, z)),
                     h(<$cHash0, h(<$cHash0, m1, gy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                               hkdfExtract(~ltk, z)),
                                    h(<$cHash0, m1, gy>), $cAEAD0), 
                        'emptyStr'>),
                     $cAEAD0)
        >
    ),
    Eq( '1', '1' )
    ]->
     [
     Out( <'emptyStr', 
           aeadEncrypt('emptyStr',
                       hkdfExpand(<$cAEAD0, 
                                   h(<$cHash0, h(<$cHash0, m1, gy>), 
                                      aeadEncrypt('emptyStr',
                                                  hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                             hkdfExtract(~ltk, z)),
                                                  h(<$cHash0, m1, gy>), $cAEAD0), 
                                      'emptyStr'>), 
                                   'K_3ae'>,
                                  hkdfExtract(~ltk, z)),
                       h(<$cHash0, h(<$cHash0, m1, gy>), 
                          aeadEncrypt('emptyStr',
                                      hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                 hkdfExtract(~ltk, z)),
                                      h(<$cHash0, m1, gy>), $cAEAD0), 
                          'emptyStr'>),
                       $cAEAD0)
          >
     )
     ]
    variants (modulo AC)
    1. ~xx   = ~xx.15
       gy    = gy.16
       z     = gy.16^~xx.15
    
    2. ~xx   = ~xx.19
       gy    = z.24^inv(~xx.19)
       z     = z.24
    
    3. ~xx   = ~xx.39
       gy    = x.69^x.70
       z     = x.69^(~xx.39*x.70)
    
    4. ~xx   = ~xx.40
       gy    = x.71^inv((~xx.40*x.72))
       z     = x.71^inv(x.72)
    
    5. ~xx   = ~xx.40
       gy    = x.71^(x.72*inv(~xx.40))
       z     = x.71^x.72
    
    6. ~xx   = ~xx.41
       gy    = x.72^(x.73*inv((~xx.41*x.74)))
       z     = x.72^(x.73*inv(x.74))
  */

rule (modulo E) R4_PSK_PSK:
   [
   StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, gxy, ~tid,
                 m1, m2
   ),
   In( <'emptyStr', 
        aeadEncrypt('emptyStr',
                    hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), 
                                'K_3ae'>,
                               prk_3e2m),
                    h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)
       >
   )
   ]
  --[
  ExpCommitR( ~tid, $U, $V, gxy ), CommitR( ~tid, $U, $V, gxy ),
  R4( ~tid, $U, $V, m1, m2,
      <'emptyStr', 
       aeadEncrypt('emptyStr',
                   hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), 
                               'K_3ae'>,
                              prk_3e2m),
                   h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)
      >
  )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) registerLTK_SIG:
   [ Fr( ~ltk ) ]
  --[ UniqLTK( $A, ~ltk ) ]->
   [ !LTK_SIG( $A, ~ltk ), !PK_SIG( $A, pk(~ltk) ), Out( <$A, pk(~ltk)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) registerLTK_STAT:
   [ Fr( ~ltk ) ]
  --[ UniqLTK( $A, 'g'^~ltk ) ]->
   [ !LTK_STAT( $A, ~ltk ), !PK_STAT( $A, 'g'^~ltk ), Out( <$A, 'g'^~ltk> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) registerLTK_PSK:
   [ Fr( ~ltk ) ]
  --[ UniqLTK( <$A, $B>, ~ltk ) ]->
   [ !LTK_PSK( <$A, $B>, ~ltk ) ]

  /* has exactly the trivial AC variant */

restriction uniqLTKs:
  "∀ id k1 k2 #i #j.
    ((UniqLTK( id, k1 ) @ #i) ∧ (UniqLTK( id, k2 ) @ #j)) ⇒ (k1 = k2)"
  // safety formula

rule (modulo E) revealLTK_SIG:
   [ !LTK_SIG( $A, ~ltk ) ] --[ LTKRev( $A ) ]-> [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) revealLTK_STAT:
   [ !LTK_STAT( $A, ~ltk ) ] --[ LTKRev( $A ) ]-> [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) revealLTK_PSK:
   [ !LTK_PSK( <$A, $B>, ~ltk ) ] --[ LTKRev( <$A, $B> ) ]-> [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) revealSessionKeyPSK:
   [ CommitI( tid, u, v, sk ) ] --[ SKRev( sk ) ]-> [ Out( sk ) ]

  /* has exactly the trivial AC variant */

lemma sanityExecutableToTheEnd:
  exists-trace
  "∃ tidI tidR u v m1 m2 m3 sk sk2 #i #j #k #l.
    ((((((((((((I1( tidI, u, v, m1 ) @ #i) ∧ (R2( tidR, v, m1, m2 ) @ #j)) ∧
              (#i < #j)) ∧
             (I3( tidI, u, v, m1, m2, m3 ) @ #k)) ∧
            (#j < #k)) ∧
           (CommitI( tidI, u, v, sk ) @ #k)) ∧
          (ExpCommitI( tidI, u, v, sk2 ) @ #k)) ∧
         (RunningI( tidI, u, v, sk ) @ #k)) ∧
        (ExpRunningI( tidI, u, v, sk2 ) @ #k)) ∧
       (R4( tidR, u, v, m1, m2, m3 ) @ #l)) ∧
      (#k < #l)) ∧
     (CommitR( tidR, u, v, sk ) @ #l)) ∧
    (ExpCommitR( tidR, u, v, sk2 ) @ #l)"
/*
guarded formula characterizing all satisfying traces:
"∃ tidI tidR u v m1 m2 m3 sk sk2 #i #j #k #l.
  (I1( tidI, u, v, m1 ) @ #i) ∧
  (R2( tidR, v, m1, m2 ) @ #j) ∧
  (I3( tidI, u, v, m1, m2, m3 ) @ #k) ∧
  (CommitI( tidI, u, v, sk ) @ #k) ∧
  (ExpCommitI( tidI, u, v, sk2 ) @ #k) ∧
  (RunningI( tidI, u, v, sk ) @ #k) ∧
  (ExpRunningI( tidI, u, v, sk2 ) @ #k) ∧
  (R4( tidR, u, v, m1, m2, m3 ) @ #l) ∧
  (CommitR( tidR, u, v, sk ) @ #l) ∧
  (ExpCommitR( tidR, u, v, sk2 ) @ #l)
 ∧
  (#i < #j) ∧ (#j < #k) ∧ (#k < #l)"
*/
by sorry

lemma authInjAgreeGuaranteeForI:
  all-traces
  "∀ tidI u v expSk #i.
    (ExpCommitI( tidI, u, v, expSk ) @ #i) ⇒
    (((((∃ tidR #j. (ExpRunningR( tidR, v, expSk ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ tidI2 u2 v2 #i2.
            (ExpCommitI( tidI2, u2, v2, expSk ) @ #i2) ∧ (¬(#i = #i2))))) ∨
       (∃ #j. (LTKRev( <u, v> ) @ #j) ∧ (#j < #i))) ∨
      (∃ #j. (LTKRev( u ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (LTKRev( v ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ tidI u v expSk #i.
  (ExpCommitI( tidI, u, v, expSk ) @ #i)
 ∧
  (((∀ tidR #j. (ExpRunningR( tidR, v, expSk ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∃ tidI2 u2 v2 #i2.
      (ExpCommitI( tidI2, u2, v2, expSk ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #j. (LTKRev( <u, v> ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (LTKRev( u ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (LTKRev( v ) @ #j) ⇒ ¬(#j < #i))"
*/
by sorry

lemma authInjAgreeGuaranteeForR:
  all-traces
  "∀ tidR u v sk #i.
    (CommitR( tidR, u, v, sk ) @ #i) ⇒
    (((((∃ tidI #j. (RunningI( tidI, u, v, sk ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ tidR2 u2 v2 #i2.
            (CommitR( tidR2, u2, v2, sk ) @ #i2) ∧ (¬(#i = #i2))))) ∨
       (∃ #j. (LTKRev( <u, v> ) @ #j) ∧ (#j < #i))) ∨
      (∃ #j. (LTKRev( u ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (LTKRev( v ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ tidR u v sk #i.
  (CommitR( tidR, u, v, sk ) @ #i)
 ∧
  (((∀ tidI #j. (RunningI( tidI, u, v, sk ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∃ tidR2 u2 v2 #i2.
      (CommitR( tidR2, u2, v2, sk ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #j. (LTKRev( <u, v> ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (LTKRev( u ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (LTKRev( v ) @ #j) ⇒ ¬(#j < #i))"
*/
by sorry

lemma authGIYImplicitAuthGuaranteeForI:
  all-traces
  "∀ tidI u v impSk #i.
    (CommitI( tidI, u, v, impSk ) @ #i) ⇒
    ((((((∀ tidR u2 v2 #j.
           (CommitR( tidR, u2, v2, impSk ) @ #j) ⇒ ((u = u2) ∧ (v = v2))) ∧
         (¬(∃ #k. K( impSk ) @ #k))) ∧
        (¬(∃ tidR u.1 v.1 #j tidR2 u2 v2 #j2.
            ((CommitR( tidR, u.1, v.1, impSk ) @ #j) ∧
             (CommitR( tidR2, u2, v2, impSk ) @ #j2)) ∧
            (¬(#j = #j2))))) ∨
       (∃ #k. LTKRev( u ) @ #k)) ∨
      (∃ #k. LTKRev( v ) @ #k)) ∨
     (∃ #k. LTKRev( <u, v> ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ tidI u v impSk #i.
  (CommitI( tidI, u, v, impSk ) @ #i)
 ∧
  (((∃ tidR u2 v2 #j.
      (CommitR( tidR, u2, v2, impSk ) @ #j) ∧ ((¬(u = u2)) ∨ (¬(v = v2)))) ∨
    (∃ #k. (K( impSk ) @ #k)) ∨
    (∃ tidR u.1 v.1 #j tidR2 u2 v2 #j2.
      (CommitR( tidR, u.1, v.1, impSk ) @ #j) ∧
      (CommitR( tidR2, u2, v2, impSk ) @ #j2)
     ∧
      ¬(#j = #j2)))) ∧
  (∀ #k. (LTKRev( u ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (LTKRev( v ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (LTKRev( <u, v> ) @ #k) ⇒ ⊥)"
*/
by sorry

lemma authGIYImplicitAuthGuaranteeForI2:
  all-traces
  "∀ tidI u v impSk #i.
    (CommitI( tidI, u, v, impSk ) @ #i) ⇒
    ((((∀ tidR u2 v2 #j.
         (CommitR( tidR, u2, v2, impSk ) @ #j) ⇒
         ((((u = u2) ∧ (v = v2)) ∧
           (∀ tidR2 u3 v3 #j2.
             (CommitR( tidR2, u3, v3, impSk ) @ #j2) ⇒ (#j = #j2))) ∧
          (¬(∃ #k. K( impSk ) @ #k)))) ∨
       (∃ #k. LTKRev( u ) @ #k)) ∨
      (∃ #k. LTKRev( v ) @ #k)) ∨
     (∃ #k. LTKRev( <u, v> ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ tidI u v impSk #i.
  (CommitI( tidI, u, v, impSk ) @ #i)
 ∧
  (∃ tidR u2 v2 #j.
    (CommitR( tidR, u2, v2, impSk ) @ #j)
   ∧
    ((¬(u = u2)) ∨
     (¬(v = v2)) ∨
     (∃ tidR2 u3 v3 #j2.
       (CommitR( tidR2, u3, v3, impSk ) @ #j2) ∧ ¬(#j = #j2)) ∨
     (∃ #k. (K( impSk ) @ #k)))) ∧
  (∀ #k. (LTKRev( u ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (LTKRev( v ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (LTKRev( <u, v> ) @ #k) ⇒ ⊥)"
*/
by sorry

lemma secrecyPFSGIYSessionKey:
  all-traces
  "(∀ tid u v sk #i #j.
     ((K( sk ) @ #i) ∧ (CommitI( tid, u, v, sk ) @ #j)) ⇒
     ((∃ #l. (LTKRev( <u, v> ) @ #l) ∧ (#l < #j)) ∨
      (∃ #l. SKRev( sk ) @ #l))) ∧
   (∀ tid u v sk #i #j.
     ((K( sk ) @ #i) ∧ (CommitR( tid, u, v, sk ) @ #j)) ⇒
     ((∃ #l. (LTKRev( <u, v> ) @ #l) ∧ (#l < #j)) ∨
      (∃ #l. SKRev( sk ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"((∃ tid u v sk #i #j.
    (K( sk ) @ #i) ∧ (CommitI( tid, u, v, sk ) @ #j)
   ∧
    (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧
    (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥)) ∨
  (∃ tid u v sk #i #j.
    (K( sk ) @ #i) ∧ (CommitR( tid, u, v, sk ) @ #j)
   ∧
    (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧
    (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ tid u v sk #i #j.
           (K( sk ) @ #i) ∧ (CommitI( tid, u, v, sk ) @ #j)
          ∧
           (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧
           (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥))  ∥
         (∃ tid u v sk #i #j.
           (K( sk ) @ #i) ∧ (CommitR( tid, u, v, sk ) @ #j)
          ∧
           (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧
           (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥)) )
    case case_1
    solve( (last(#j))  ∥ (last(#i))  ∥
           (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #j))  ∥
           (∃ #l. (SKRev( sk ) @ #l) ∧ ¬(last(#l))) )
      case case_1
      solve( StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #j )
        case I1_PSK_PSK
        solve( !KU( aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0, 
                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                                            'K_2ae'>,
                                           hkdfExtract(~ltk, sk)),
                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), $cAEAD0)
               ) @ #vk.3 )
          case R2_PSK_PSK
          solve( !KU( 'g'^(~xx*~yy) ) @ #vk.1 )
            case I1_PSK_PSK
            by solve( !KU( ~yy ) @ #vk.14 )
          next
            case R2_PSK_PSK
            by solve( !KU( ~xx ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~xx ) @ #vk.16 )
          qed
        next
          case c_aeadEncrypt
          solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
                 ) @ #vk.6 )
            case c_h
            solve( !KU( hkdfExpand(<$cAEAD0, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 'K_2ae'>,
                                   hkdfExtract(~ltk, sk))
                   ) @ #vk.7 )
              case R2_PSK_PSK_case_1
              solve( !KU( 'g'^(~xx*~yy) ) @ #vk.4 )
                case I1_PSK_PSK
                by solve( !KU( ~yy ) @ #vk.21 )
              next
                case R2_PSK_PSK
                by solve( !KU( ~xx ) @ #vk.21 )
              next
                case c_exp
                by solve( !KU( ~xx ) @ #vk.23 )
              qed
            next
              case R2_PSK_PSK_case_2
              solve( !KU( 'g'^(~xx*~yy) ) @ #vk.4 )
                case I1_PSK_PSK
                by solve( !KU( ~yy ) @ #vk.22 )
              next
                case R2_PSK_PSK
                by solve( !KU( ~xx ) @ #vk.22 )
              next
                case c_exp
                by solve( !KU( ~xx ) @ #vk.24 )
              qed
            next
              case c_hkdfExpand
              solve( !KU( hkdfExtract(~ltk, sk) ) @ #vk.23 )
                case c_hkdfExtract
                solve( !KU( ~ltk ) @ #vk.25 )
                  case revealLTK_PSK
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #j )
        case I1_PSK_PSK
        solve( !KU( aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0, 
                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                                            'K_2ae'>,
                                           hkdfExtract(~ltk, sk)),
                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), $cAEAD0)
               ) @ #vk.3 )
          case R2_PSK_PSK
          solve( !KU( 'g'^(~xx*~yy) ) @ #vk.1 )
            case I1_PSK_PSK
            by solve( !KU( ~yy ) @ #vk.14 )
          next
            case R2_PSK_PSK
            by solve( !KU( ~xx ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~xx ) @ #vk.16 )
          qed
        next
          case c_aeadEncrypt
          solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
                 ) @ #vk.6 )
            case c_h
            solve( !KU( hkdfExpand(<$cAEAD0, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 'K_2ae'>,
                                   hkdfExtract(~ltk, sk))
                   ) @ #vk.7 )
              case R2_PSK_PSK_case_1
              solve( !KU( 'g'^(~xx*~yy) ) @ #vk.4 )
                case I1_PSK_PSK
                by solve( !KU( ~yy ) @ #vk.21 )
              next
                case R2_PSK_PSK
                by solve( !KU( ~xx ) @ #vk.21 )
              next
                case c_exp
                by solve( !KU( ~xx ) @ #vk.23 )
              qed
            next
              case R2_PSK_PSK_case_2
              solve( !KU( 'g'^(~xx*~yy) ) @ #vk.4 )
                case I1_PSK_PSK
                by solve( !KU( ~yy ) @ #vk.22 )
              next
                case R2_PSK_PSK
                by solve( !KU( ~xx ) @ #vk.22 )
              next
                case c_exp
                by solve( !KU( ~xx ) @ #vk.24 )
              qed
            next
              case c_hkdfExpand
              solve( !KU( hkdfExtract(~ltk, sk) ) @ #vk.23 )
                case c_hkdfExtract
                solve( !KU( ~ltk ) @ #vk.25 )
                  case revealLTK_PSK
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#j))  ∥ (last(#i))  ∥
           (∃ #l. (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #j))  ∥
           (∃ #l. (SKRev( sk ) @ #l) ∧ ¬(last(#l))) )
      case case_1
      solve( StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                           ~tid, m1, m2
             ) ▶₀ #j )
        case R2_PSK_PSK
        solve( !KU( aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0.1, 
                                            h(<$cHash0.1, 
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                               aeadEncrypt('emptyStr',
                                                           hkdfExpand(<$cAEAD0, 
                                                                       h(<$cHash0, 
                                                                          <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                                          >, 
                                                                          'g'^~yy>), 
                                                                       'K_2ae'>,
                                                                      hkdfExtract(~ltk, sk)),
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>),
                                                           $cAEAD0), 
                                               'emptyStr'>), 
                                            'K_3ae'>,
                                           hkdfExtract(~ltk, sk)),
                                h(<$cHash0.1, 
                                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                   aeadEncrypt('emptyStr',
                                               hkdfExpand(<$cAEAD0, 
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>), 
                                                           'K_2ae'>,
                                                          hkdfExtract(~ltk, sk)),
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                               $cAEAD0), 
                                   'emptyStr'>),
                                $cAEAD0.1)
               ) @ #vk.3 )
          case I3_PSK_PSK
          solve( (∃ #l.
                   (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.2))  ∥
                 (∃ #l. (SKRev( 'g'^(~xx*~yy) ) @ #l) ∧ ¬(last(#l))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case c_aeadEncrypt
          solve( !KU( h(<$cHash0.1, 
                         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                         aeadEncrypt('emptyStr',
                                     hkdfExpand(<$cAEAD0, 
                                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                                 'K_2ae'>,
                                                hkdfExtract(~ltk, sk)),
                                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0), 
                         'emptyStr'>)
                 ) @ #vk.15 )
            case c_h
            solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
                   ) @ #vk.21 )
              case c_h
              solve( !KU( hkdfExpand(<$cAEAD0.1, 
                                      h(<$cHash0.1, 
                                         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                         aeadEncrypt('emptyStr',
                                                     hkdfExpand(<$cAEAD0, 
                                                                 h(<$cHash0, 
                                                                    <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                                    'g'^~yy>), 
                                                                 'K_2ae'>,
                                                                hkdfExtract(~ltk, sk)),
                                                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy
                                                       >),
                                                     $cAEAD0), 
                                         'emptyStr'>), 
                                      'K_3ae'>,
                                     hkdfExtract(~ltk, sk))
                     ) @ #vk.19 )
                case I3_PSK_PSK_case_1
                solve( (∃ #l.
                         (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.2))  ∥
                       (∃ #l. (SKRev( 'g'^(~xx*~yy) ) @ #l) ∧ ¬(last(#l))) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case I3_PSK_PSK_case_2
                solve( (∃ #l.
                         (LTKRev( <$U, $V> ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.2))  ∥
                       (∃ #l. (SKRev( 'g'^(~xx*~yy) ) @ #l) ∧ ¬(last(#l))) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case c_hkdfExpand
                solve( !KU( hkdfExtract(~ltk, sk) ) @ #vk.29 )
                  case c_hkdfExtract
                  solve( !KU( ~ltk ) @ #vk.31 )
                    case revealLTK_PSK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                           ~tid, m1, m2
             ) ▶₀ #j )
        case R2_PSK_PSK
        solve( !KU( aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0.1, 
                                            h(<$cHash0.1, 
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                               aeadEncrypt('emptyStr',
                                                           hkdfExpand(<$cAEAD0, 
                                                                       h(<$cHash0, 
                                                                          <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                                          >, 
                                                                          'g'^~yy>), 
                                                                       'K_2ae'>,
                                                                      hkdfExtract(~ltk, sk)),
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>),
                                                           $cAEAD0), 
                                               'emptyStr'>), 
                                            'K_3ae'>,
                                           hkdfExtract(~ltk, sk)),
                                h(<$cHash0.1, 
                                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                   aeadEncrypt('emptyStr',
                                               hkdfExpand(<$cAEAD0, 
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>), 
                                                           'K_2ae'>,
                                                          hkdfExtract(~ltk, sk)),
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                               $cAEAD0), 
                                   'emptyStr'>),
                                $cAEAD0.1)
               ) @ #vk.3 )
          case I3_PSK_PSK
          solve( !KU( 'g'^(~xx*~yy) ) @ #vk.1 )
            case I1_PSK_PSK
            by solve( !KU( ~yy ) @ #vk.17 )
          next
            case R2_PSK_PSK
            by solve( !KU( ~xx ) @ #vk.17 )
          next
            case c_exp
            by solve( !KU( ~xx ) @ #vk.19 )
          qed
        next
          case c_aeadEncrypt
          solve( !KU( h(<$cHash0.1, 
                         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                         aeadEncrypt('emptyStr',
                                     hkdfExpand(<$cAEAD0, 
                                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                                 'K_2ae'>,
                                                hkdfExtract(~ltk, sk)),
                                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0), 
                         'emptyStr'>)
                 ) @ #vk.15 )
            case c_h
            solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
                   ) @ #vk.21 )
              case c_h
              solve( !KU( hkdfExpand(<$cAEAD0.1, 
                                      h(<$cHash0.1, 
                                         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                         aeadEncrypt('emptyStr',
                                                     hkdfExpand(<$cAEAD0, 
                                                                 h(<$cHash0, 
                                                                    <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                                    'g'^~yy>), 
                                                                 'K_2ae'>,
                                                                hkdfExtract(~ltk, sk)),
                                                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy
                                                       >),
                                                     $cAEAD0), 
                                         'emptyStr'>), 
                                      'K_3ae'>,
                                     hkdfExtract(~ltk, sk))
                     ) @ #vk.19 )
                case I3_PSK_PSK_case_1
                solve( !KU( 'g'^(~xx*~yy) ) @ #vk.6 )
                  case I1_PSK_PSK
                  by solve( !KU( ~yy ) @ #vk.27 )
                next
                  case R2_PSK_PSK
                  by solve( !KU( ~xx ) @ #vk.27 )
                next
                  case c_exp
                  by solve( !KU( ~xx ) @ #vk.29 )
                qed
              next
                case I3_PSK_PSK_case_2
                solve( !KU( 'g'^(~xx*~yy) ) @ #vk.6 )
                  case I1_PSK_PSK
                  by solve( !KU( ~yy ) @ #vk.28 )
                next
                  case R2_PSK_PSK
                  by solve( !KU( ~xx ) @ #vk.28 )
                next
                  case c_exp
                  by solve( !KU( ~xx ) @ #vk.30 )
                qed
              next
                case c_hkdfExpand
                solve( !KU( hkdfExtract(~ltk, sk) ) @ #vk.29 )
                  case c_hkdfExtract
                  solve( !KU( ~ltk ) @ #vk.31 )
                    case revealLTK_PSK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: TMP_edhoc_PSK_PSK.spthy

  sanityExecutableToTheEnd (exists-trace): analysis incomplete (1 steps)
  authInjAgreeGuaranteeForI (all-traces): analysis incomplete (1 steps)
  authInjAgreeGuaranteeForR (all-traces): analysis incomplete (1 steps)
  authGIYImplicitAuthGuaranteeForI (all-traces): analysis incomplete (1 steps)
  authGIYImplicitAuthGuaranteeForI2 (all-traces): analysis incomplete (1 steps)
  secrecyPFSGIYSessionKey (all-traces): verified (85 steps)

==============================================================================

real	0m5,528s
user	0m11,609s
sys	0m2,068s
