maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ...  solved goal nr. 0 (directly):
    ExpCommitI( tidI, u.1, v.2, expSk.3 ) @ #i.4
  solved goal nr. 0 (directly):
    CommitR( tidR, u.1, v.2, sk.3 ) @ #i.4
  solved goal nr. 0 (directly): !LTK_PSK( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): !LTK_SIG( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): !PK_SIG( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): !LTK_STAT( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): !PK_STAT( t.1, t.2 ) ▶₀ #i
  solved goal nr. 0 (directly): CommitI( t.1, t.2, t.3, t.4 ) ▶₀ #i
  solved goal nr. 0 (directly):
    StI1_PSK_PSK( t.1, t.2, t.3, t.4, t.5, t.6 ) ▶₀ #i
  solved goal nr. 2 (directly):
    !LTK_PSK( <$U.8, $V.8>, ~ltk.8 ) ▶₀ #vr.7
  solved goal nr. 0 (directly):
    StR2_PSK_PSK( t.1, t.2, t.3, t.4, t.5, t.6, t.7, t.8, t.9, t.10,
                  t.11
    ) ▶₀ #i
  solved goal nr. 0 (directly): !KU( ~t.1 ) @ #i
  solved goal nr. 0 (directly):
    !KU( aeadDecrypt(t.1, t.2, t.3, t.4) ) @ #i
  solved goal nr. 0 (directly):
    !KU( aeadEncrypt(t.1, t.2, t.3, t.4) ) @ #i
  solved goal nr. 2 (directly):
    !LTK_PSK( <$U.13, $V.13>, ~ltk.13 ) ▶₀ #vr.12
  solved goal nr. 0 (directly): !KU( decrypt(t.1, t.2, t.3) ) @ #i
  solved goal nr. 0 (directly): !KU( t.1^t.2 ) @ #i
  solved goal nr. 0 (directly): !KU( fst(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( h(t.1) ) @ #i
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.16, $V.16>, ~ltk.16 ) ▶₀ #vr.15
  solved goal nr. 0 (directly): !KU( hkdfExpand(t.1, t.2) ) @ #i
  solved goal nr. 0 (directly): !KU( hkdfExtract(t.1, t.2) ) @ #i
  solved goal nr. 0 (directly): !KU( pk(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( sign(t.1, t.2) ) @ #i
  solved goal nr. 0 (directly): !KU( snd(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( verify(t.1, t.2, t.3) ) @ #i
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.16, u.16, v.16, t.14 ) ▶₀ #vr.15
  solved goal nr. 4 (directly): !LTK_SIG( $A.7, ~t.1 ) ▶₀ #vr.6
  solved goal nr. 4 (directly): !LTK_STAT( $A.7, ~t.1 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    !LTK_PSK( <$A.7, $B.7>, ~t.1 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    StI1_PSK_PSK( $U.16, ~ltk.16, $V.16, ~xx.16, m1.16, ~tid.16
    ) ▶₀ #vr.15
  solved goal nr. 11 (directly):
    !LTK_PSK( <$U.16, $V.16>, ~ltk.16 ) ▶₀ #vr.24
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    CommitI( tid.13, u.13, v.13, t.11 ) ▶₀ #vr.12
  solved goal nr. 4 (directly):
    CommitI( tid.10, u.10, v.10, t.8 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.16, u.16, v.16, t.14 ) ▶₀ #vr.15
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.10, u.10, v.10, t.8 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    CommitI( tid.7, u.7, v.7, t.5 ) ▶₀ #vr.6
  solved goal nr. 4 (directly):
    CommitI( tid.13, u.13, v.13, t.11 ) ▶₀ #vr.12
  solved goal nr. 4 (directly):
    CommitI( tid.10, u.10, v.10, t.8 ) ▶₀ #vr.9
  solved goal nr. 24 (precomputed):
    !KU( h(<$cHash0.10, 
            <'PSK', 'PSK', $cSUITE0.10, gx.10, $U.10, $V.10>, 'g'^~yy.10>)
    ) @ #vk.31
  solved goal nr. 4 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly):
    StI1_PSK_PSK( $U.10, ~ltk.10, $V.10, ~xx.10, m1.10, ~tid.10
    ) ▶₀ #vr.9
  solved goal nr. 19 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.23
  solved goal nr. 4 (directly):
    StI1_PSK_PSK( $U.10, ~ltk.10, $V.10, ~xx.10, m1.10, ~tid.10
    ) ▶₀ #vr.9
  solved goal nr. 16 (directly):
    !LTK_PSK( <$U.10, $V.10>, ~ltk.10 ) ▶₀ #vr.22
  solved goal nr. 4 (directly):
    CommitI( tid.10, u.10, v.10, t.8 ) ▶₀ #vr.9
  solved goal nr. 16 (precomputed):
    !KU( h(<$cHash0.10, 
            h(<$cHash0.10, 
               <'PSK', 'PSK', $cSUITE0.24, 'g'^~xx.10, $U.10, $V.10>, gy.10>), 
            aeadEncrypt('emptyStr',
                        hkdfExpand(<$cAEAD0.10, 
                                    h(<$cHash0.10, 
                                       <'PSK', 'PSK', $cSUITE0.24, 'g'^~xx.10, $U.10, $V.10>, gy.10
                                      >), 
                                    'K_2ae'>,
                                   hkdfExtract(~ltk.10, z.10)),
                        h(<$cHash0.10, 
                           <'PSK', 'PSK', $cSUITE0.24, 'g'^~xx.10, $U.10, $V.10>, gy.10>),
                        $cAEAD0.10), 
            'emptyStr'>)
    ) @ #vk.21
  solved goal nr. 25 (precomputed):
    !KU( h(<$cHash0.10, 
            <'PSK', 'PSK', $cSUITE0.24, 'g'^~xx.10, $U.10, $V.10>, gy.10>)
    ) @ #vk.39
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (∀ tidI #j. (RunningI( tidI, $U, $V, sk ) @ #j) ⇒ ¬(#j < #i))  ∥ (∃ tidR2 u2 v2 #i2.   (CommitR( tidR2, u2, v2, sk ) @ #i2) ∧ ¬(#i = #i2))
1: StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,              ~tid, m1, m2) ▶₀ #i
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>),                              'K_3ae'>,                            prk_3e2m),                 h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)) @ #vk.2

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 1 (directly):
     (∀ tidI #j. (RunningI( tidI, $U, $V, sk ) @ #j) ⇒ ¬(#j < #i))  ∥
     (∃ tidR2 u2 v2 #i2.
       (CommitR( tidR2, u2, v2, sk ) @ #i2) ∧ ¬(#i = #i2))
  solved goal nr. 7 (directly):
    CommitR( tidR2.3, u2.4, v2.5, sk ) @ #i2.6
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (∀ tidR #j. (ExpRunningR( tidR, $V, expSk ) @ #j) ⇒ ¬(#j < #i))  ∥ (∃ tidI2 u2 v2 #i2.   (ExpCommitI( tidI2, u2, v2, expSk ) @ #i2) ∧ ¬(#i = #i2))
1: StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, m1, gy>), $cAEAD0)) @ #vk.2
3: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 1 (directly):
     (∀ tidR #j. (ExpRunningR( tidR, $V, expSk ) @ #j) ⇒ ¬(#j < #i))  ∥
     (∃ tidI2 u2 v2 #i2.
       (ExpCommitI( tidI2, u2, v2, expSk ) @ #i2) ∧ ¬(#i = #i2))
  solved goal nr. 7 (directly):
    ExpCommitI( tidI2.3, u2.4, v2.5, expSk ) @ #i2.6
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,              ~tid, m1, m2) ▶₀ #i
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>),                              'K_3ae'>,                            prk_3e2m),                 h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)) @ #vk.2

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 3 (precomputed):
    StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                  ~tid, m1, m2
    ) ▶₀ #i
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (#i < #i2)  ∥ (#i2 < #i)
1: StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,              ~tid, m1, m2) ▶₀ #i
2: StR2_PSK_PSK( $U.1, $V.1, ~ltk.1, ~yy.1, prk_3e2m.1, TH_2.1,              CIPHERTEXT_2.1, sk, ~tid.1, m1.1, m2.1) ▶₀ #i2
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>),                              'K_3ae'>,                            prk_3e2m),                 h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)) @ #vk.3
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, TH_2.1, CIPHERTEXT_2.1, 'emptyStr'>), 'K_3ae'>,                            prk_3e2m.1),                 h(<$cHash0.1, TH_2.1, CIPHERTEXT_2.1, 'emptyStr'>), $cAEAD0.1)) @ #vk.4

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 8 (directly): (#i < #i2)  ∥ (#i2 < #i)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, m1, gy>), $cAEAD0)) @ #vk.2
2: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0:  (#i < #i2)  ∥ (#i2 < #i)
1: StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i
2: StI1_PSK_PSK( $U.1, ~ltk.1, $V.1, ~xx.1, m1.1, ~tid.1 ) ▶₀ #i2
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, m1, gy>), $cAEAD0)) @ #vk.2
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1, h(<$cHash0.1, m1.1, gy.1>), 'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, m1.1, gy.1>), $cAEAD0.1)) @ #vk.5
5: splitEqs(0)
6: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 3 (precomputed):
    StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i
  solved goal nr. 8 (directly): (#i < #i2)  ∥ (#i2 < #i)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0,                                                         h(<$cHash0,                                                            <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                            'g'^~yy>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk, sk)),                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                            $cAEAD0),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                 $cAEAD0.1)) @ #vk.2
1: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 6 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0.1, 
                                 h(<$cHash0.1, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0, 
                                                            h(<$cHash0, 
                                                               <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                               >, 
                                                               'g'^~yy>), 
                                                            'K_2ae'>,
                                                           hkdfExtract(~ltk, sk)),
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>),
                                                $cAEAD0), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk, sk)),
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>),
                     $cAEAD0.1)
    ) @ #vk.2
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                              'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                 $cAEAD0)) @ #vk.2
1: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 6 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                                 'K_2ae'>,
                                hkdfExtract(~ltk, expSk)),
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),
                     $cAEAD0)
    ) @ #vk.2
  simplified formula:
      "((#vr.16 = #i) ∨ (#i < #vr.16))"
    to
      "⊥"
  solved goal nr. 27 (simplified): (#vr.16 = #i)  ∥ (#i < #vr.16)
  simplified formula:
      "((#vr.7 = #i) ∨ (#i < #vr.7))"
    to
      "⊥"
  solved goal nr. 22 (simplified): (#vr.7 = #i)  ∥ (#i < #vr.7)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,              ~tid, m1, m2) ▶₀ #i
1: StR2_PSK_PSK( $U.1, $V.1, ~ltk.1, ~yy.1, prk_3e2m.1, TH_2.1,              CIPHERTEXT_2.1, sk, ~tid.1, m1.1, m2.1) ▶₀ #i2
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>),                              'K_3ae'>,                            prk_3e2m),                 h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)) @ #vk.3
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, TH_2.1, CIPHERTEXT_2.1, 'emptyStr'>), 'K_3ae'>,                            prk_3e2m.1),                 h(<$cHash0.1, TH_2.1, CIPHERTEXT_2.1, 'emptyStr'>), $cAEAD0.1)) @ #vk.4

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 3 (precomputed):
    StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                  ~tid, m1, m2
    ) ▶₀ #i
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,              ~tid, m1, m2) ▶₀ #i
1: StR2_PSK_PSK( $U.1, $V.1, ~ltk.1, ~yy.1, prk_3e2m.1, TH_2.1,              CIPHERTEXT_2.1, sk, ~tid.1, m1.1, m2.1) ▶₀ #i2
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>),                              'K_3ae'>,                            prk_3e2m),                 h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)) @ #vk.3
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, TH_2.1, CIPHERTEXT_2.1, 'emptyStr'>), 'K_3ae'>,                            prk_3e2m.1),                 h(<$cHash0.1, TH_2.1, CIPHERTEXT_2.1, 'emptyStr'>), $cAEAD0.1)) @ #vk.4

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 3 (precomputed):
    StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                  ~tid, m1, m2
    ) ▶₀ #i
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i
1: StI1_PSK_PSK( $U.1, ~ltk.1, $V.1, ~xx.1, m1.1, ~tid.1 ) ▶₀ #i2
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, m1, gy>), $cAEAD0)) @ #vk.2
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1, h(<$cHash0.1, m1.1, gy.1>), 'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, m1.1, gy.1>), $cAEAD0.1)) @ #vk.5
4: splitEqs(0)
5: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 3 (precomputed):
    StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i
1: StI1_PSK_PSK( $U.1, ~ltk.1, $V.1, ~xx.1, m1.1, ~tid.1 ) ▶₀ #i2
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, m1, gy>), $cAEAD0)) @ #vk.2
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1, h(<$cHash0.1, m1.1, gy.1>), 'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, m1.1, gy.1>), $cAEAD0.1)) @ #vk.5
4: splitEqs(0)
5: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 3 (precomputed):
    StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.1,         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),         aeadEncrypt('emptyStr',                    hkdfExpand(<$cAEAD0,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 'K_2ae'>,                               hkdfExtract(~ltk, sk)),                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                    $cAEAD0),         'emptyStr'>)) @ #vk.14
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.13
2: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 23 (precomputed):
    !KU( h(<$cHash0.1, 
            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
            aeadEncrypt('emptyStr',
                        hkdfExpand(<$cAEAD0, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    'K_2ae'>,
                                   hkdfExtract(~ltk, sk)),
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                        $cAEAD0), 
            'emptyStr'>)
    ) @ #vk.14
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)) @ #vk.5
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.4
2: splitEqs(0)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 12 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
    ) @ #vk.5
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.6
1: splitEqs(0)
2: !KU( 'g'^~xx ) @ #vk.16

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 11 (precomputed):
    !KU( hkdfExpand(<$cAEAD0, 
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                     'K_2ae'>,
                    hkdfExtract(~ltk, expSk))
    ) @ #vk.6
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)) @ #vk.20
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.15
2: splitEqs(1)
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.21

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 29 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
    ) @ #vk.20
  simplified formula:
      "((#vr.23 = #i) ∨ (#i < #vr.23))"
    to
      "⊥"
  solved goal nr. 50 (simplified): (#vr.23 = #i)  ∥ (#i < #vr.23)
  simplified formula:
      "((#vr.23 = #i) ∨ (#i < #vr.23))"
    to
      "⊥"
  solved goal nr. 45 (simplified): (#vr.23 = #i)  ∥ (#i < #vr.23)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, expSk) ) @ #vk.22
1: splitEqs(0)
2: !KU( 'g'^~xx ) @ #vk.18

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 32 (precomputed):
    !KU( hkdfExtract(~ltk, expSk) ) @ #vk.22
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.18
1: splitEqs(1)
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.22
3: !KU( 'g'^~yy ) @ #vk.25

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 22 (precomputed):
    !KU( hkdfExpand(<$cAEAD0.1, 
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>), 
                     'K_3ae'>,
                    hkdfExtract(~ltk, sk))
    ) @ #vk.18
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.24
1: splitEqs(0)
2: !KU( 'g'^~xx ) @ #vk.19

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 38 (precomputed): !KU( ~ltk ) @ #vk.24
  simplified formula:
      "((#vr.29 = #i) ∨ (#i < #vr.29))"
    to
      "⊥"
  solved goal nr. 76 (simplified): (#vr.29 = #i)  ∥ (#i < #vr.29)
  simplified formula:
      "((#vr.27 = #i) ∨ (#i < #vr.27))"
    to
      "⊥"
  solved goal nr. 42 (simplified): (#vr.27 = #i)  ∥ (#i < #vr.27)
  simplified formula:
      "((#vr.29 = #i) ∨ (#i < #vr.29))"
    to
      "⊥"
  solved goal nr. 58 (simplified): (#vr.29 = #i)  ∥ (#i < #vr.29)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StI1_PSK_PSK( $U.1, ~ltk.1, $V.1, ~xx.1, m1, ~tid.1 ) ▶₀ #i2
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                              'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                 $cAEAD0)) @ #vk.2
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1, h(<$cHash0.1, m1, gy.1>), 'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, m1, gy.1>), $cAEAD0.1)) @ #vk.5
3: splitEqs(0)
4: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 10 (precomputed):
    StI1_PSK_PSK( $U.1, ~ltk.1, $V.1, ~xx.1, m1, ~tid.1 ) ▶₀ #i2
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, sk) ) @ #vk.28
1: splitEqs(1)
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.25
3: !KU( 'g'^~yy ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 51 (precomputed):
    !KU( hkdfExtract(~ltk, sk) ) @ #vk.28
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                              'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                 $cAEAD0)) @ #vk.2
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 gy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                 $cAEAD0.1)) @ #vk.5
2: splitEqs(0)
3: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 6 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                                 'K_2ae'>,
                                hkdfExtract(~ltk, expSk)),
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),
                     $cAEAD0)
    ) @ #vk.2
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StR2_PSK_PSK( $U.1, $V.1, ~ltk.1, ~yy.1, prk_3e2m, TH_2,              CIPHERTEXT_2, sk, ~tid.1, m1, m2) ▶₀ #i2
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0,                                                         h(<$cHash0,                                                            <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                            'g'^~yy>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk, sk)),                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                            $cAEAD0),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                 $cAEAD0.1)) @ #vk.3
2: splitEqs(2)
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, TH_2, CIPHERTEXT_2, 'emptyStr'>), 'K_3ae'>,                            prk_3e2m),                 h(<$cHash0.2, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0.2)) @ #vk.4

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 10 (precomputed):
    StR2_PSK_PSK( $U.1, $V.1, ~ltk.1, ~yy.1, prk_3e2m, TH_2,
                  CIPHERTEXT_2, sk, ~tid.1, m1, m2
    ) ▶₀ #i2
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.30
1: splitEqs(1)
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
3: !KU( 'g'^~yy ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 57 (precomputed): !KU( ~ltk ) @ #vk.30
  simplified formula:
      "((#vr.33 = #i) ∨ (#i < #vr.33))"
    to
      "⊥"
  solved goal nr. 61 (simplified): (#vr.33 = #i)  ∥ (#i < #vr.33)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)) @ #vk.8
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 gy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                 $cAEAD0.1)) @ #vk.5
2: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.7
3: splitEqs(0)
4: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 21 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
    ) @ #vk.8
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(1)
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^x>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^x>),                 $cAEAD0.1)) @ #vk.5
2: !KU( 'g'^x ) @ #vk.4
3: !KU( 'g'^~xx ) @ #vk.12
4: !KU( 'g'^~yy ) @ #vk.2

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 9 (directly): splitEqs(1)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0,                                                         h(<$cHash0,                                                            <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                            'g'^~yy>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk, sk)),                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                            $cAEAD0),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                 $cAEAD0.1)) @ #vk.3
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.3,                              h(<$cHash0.3,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.2,                                                         h(<$cHash0.2,                                                            <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, sk)),                                            h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.2),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                 $cAEAD0.3)) @ #vk.4
2: splitEqs(2)
3: splitEqs(3)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 6 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0.1, 
                                 h(<$cHash0.1, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0, 
                                                            h(<$cHash0, 
                                                               <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                               >, 
                                                               'g'^~yy>), 
                                                            'K_2ae'>,
                                                           hkdfExtract(~ltk, sk)),
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>),
                                                $cAEAD0), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk, sk)),
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>),
                     $cAEAD0.1)
    ) @ #vk.3
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.4
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^(~xx*~yy*inv(~xx.1))>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                 $cAEAD0.1)) @ #vk.5
2: !KU( 'g'^~xx ) @ #vk.12
3: !KU( 'g'^~yy ) @ #vk.2

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 31 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.4
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.1,         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),         aeadEncrypt('emptyStr',                    hkdfExpand(<$cAEAD0,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 'K_2ae'>,                               hkdfExtract(~ltk, sk)),                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                    $cAEAD0),         'emptyStr'>)) @ #vk.25
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.3,                              h(<$cHash0.3,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.2,                                                         h(<$cHash0.2,                                                            <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, sk)),                                            h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.2),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                 $cAEAD0.3)) @ #vk.4
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.24
3: splitEqs(2)
4: splitEqs(3)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 43 (precomputed):
    !KU( h(<$cHash0.1, 
            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
            aeadEncrypt('emptyStr',
                        hkdfExpand(<$cAEAD0, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    'K_2ae'>,
                                   hkdfExtract(~ltk, sk)),
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                        $cAEAD0), 
            'emptyStr'>)
    ) @ #vk.25
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(3)
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.4
2: !KU( 'g'^x ) @ #vk.20
3: !KU( 'g'^~yy ) @ #vk.25
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
5: !KU( 'g'^~xx ) @ #vk.13

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 39 (directly): splitEqs(3)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 gy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                 $cAEAD0.1)) @ #vk.7
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.9
2: splitEqs(0)
3: splitEqs(1)
4: !KU( 'g'^~xx ) @ #vk.19

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 13 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0.1, 
                                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, 
                                    gy.1>), 
                                 'K_2ae'>,
                                hkdfExtract(~ltk.1, expSk)),
                     h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, 
                        gy.1>),
                     $cAEAD0.1)
    ) @ #vk.7
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.17
1: !KU( ~xx.1 ) @ #vk.19
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^(~xx*~yy*inv(~xx.1))>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                 $cAEAD0.1)) @ #vk.5
3: !KU( 'g'^~xx ) @ #vk.12
4: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 44 (precomputed): !KU( ~xx ) @ #vk.17
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.17
1: !KU( ~xx.1 ) @ #vk.19
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^(~xx*~yy*inv(~xx.1))>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                 $cAEAD0.1)) @ #vk.5
3: !KU( 'g'^~xx ) @ #vk.12
4: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 34 (precomputed): !KU( ~yy ) @ #vk.17
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StI1_PSK_PSK( $U.1, ~ltk.1, $V.1, ~xx.1, m1, ~tid.1 ) ▶₀ #i2
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                              'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                 $cAEAD0)) @ #vk.2
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1, h(<$cHash0.1, m1, gy.1>), 'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, m1, gy.1>), $cAEAD0.1)) @ #vk.5
3: splitEqs(0)
4: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 10 (precomputed):
    StI1_PSK_PSK( $U.1, ~ltk.1, $V.1, ~xx.1, m1, ~tid.1 ) ▶₀ #i2
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.20
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1,                                                             'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.4
2: !KU( 'g'^~yy ) @ #vk.25
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
4: !KU( 'g'^~xx ) @ #vk.13

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 47 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.20
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                              'K_2ae'>,                            hkdfExtract(~ltk, expSk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                 $cAEAD0)) @ #vk.2
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 gy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                 $cAEAD0.1)) @ #vk.5
2: splitEqs(0)
3: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 6 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                                 'K_2ae'>,
                                hkdfExtract(~ltk, expSk)),
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),
                     $cAEAD0)
    ) @ #vk.2
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)) @ #vk.8
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 gy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                 $cAEAD0.1)) @ #vk.5
2: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.7
3: splitEqs(0)
4: splitEqs(1)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 21 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
    ) @ #vk.8
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(1)
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^x>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^x>),                 $cAEAD0.1)) @ #vk.5
2: !KU( 'g'^x ) @ #vk.4
3: !KU( 'g'^~xx ) @ #vk.12
4: !KU( 'g'^~yy ) @ #vk.2

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 9 (directly): splitEqs(1)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)) @ #vk.31
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.3,                              h(<$cHash0.3,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.2,                                                         h(<$cHash0.2,                                                            <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, sk)),                                            h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.2),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                 $cAEAD0.3)) @ #vk.6
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.26
3: splitEqs(2)
4: splitEqs(3)
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.32

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 49 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
    ) @ #vk.31
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.4
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^(~xx*~yy*inv(~xx.1))>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                 $cAEAD0.1)) @ #vk.5
2: !KU( 'g'^~xx ) @ #vk.12
3: !KU( 'g'^~yy ) @ #vk.2

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 31 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.4
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: StR2_PSK_PSK( $U.1, $V.1, ~ltk.1, ~yy.1, prk_3e2m, TH_2,              CIPHERTEXT_2, sk, ~tid.1, m1, m2) ▶₀ #i2
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0,                                                         h(<$cHash0,                                                            <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                            'g'^~yy>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk, sk)),                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                            $cAEAD0),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                 $cAEAD0.1)) @ #vk.3
2: splitEqs(2)
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, TH_2, CIPHERTEXT_2, 'emptyStr'>), 'K_3ae'>,                            prk_3e2m),                 h(<$cHash0.2, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0.2)) @ #vk.4

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 10 (precomputed):
    StR2_PSK_PSK( $U.1, $V.1, ~ltk.1, ~yy.1, prk_3e2m, TH_2,
                  CIPHERTEXT_2, sk, ~tid.1, m1, m2
    ) ▶₀ #i2
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 gy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, expSk)),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                 $cAEAD0.1)) @ #vk.7
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.9
2: splitEqs(0)
3: splitEqs(1)
4: !KU( 'g'^~xx ) @ #vk.19

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 13 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0.1, 
                                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, 
                                    gy.1>), 
                                 'K_2ae'>,
                                hkdfExtract(~ltk.1, expSk)),
                     h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, 
                        gy.1>),
                     $cAEAD0.1)
    ) @ #vk.7
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.17
1: !KU( ~xx.1 ) @ #vk.19
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^(~xx*~yy*inv(~xx.1))>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                 $cAEAD0.1)) @ #vk.5
3: !KU( 'g'^~xx ) @ #vk.12
4: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 34 (precomputed): !KU( ~yy ) @ #vk.17
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.17
1: !KU( ~xx.1 ) @ #vk.19
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^(~xx*~yy*inv(~xx.1))>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                 $cAEAD0.1)) @ #vk.5
3: !KU( 'g'^~xx ) @ #vk.12
4: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 44 (precomputed): !KU( ~xx ) @ #vk.17
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0,                                                         h(<$cHash0,                                                            <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                            'g'^~yy>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk, sk)),                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                            $cAEAD0),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                 $cAEAD0.1)) @ #vk.3
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.3,                              h(<$cHash0.3,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.2,                                                         h(<$cHash0.2,                                                            <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, sk)),                                            h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.2),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                 $cAEAD0.3)) @ #vk.4
2: splitEqs(2)
3: splitEqs(3)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 6 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0.1, 
                                 h(<$cHash0.1, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0, 
                                                            h(<$cHash0, 
                                                               <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                               >, 
                                                               'g'^~yy>), 
                                                            'K_2ae'>,
                                                           hkdfExtract(~ltk, sk)),
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>),
                                                $cAEAD0), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk, sk)),
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>),
                     $cAEAD0.1)
    ) @ #vk.3
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.18
1: !KU( ~yy ) @ #vk.19
2: !KU( ~xx.1 ) @ #vk.21
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^(~xx*~yy*inv(~xx.1))>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                 $cAEAD0.1)) @ #vk.5
4: !KU( 'g'^~xx ) @ #vk.12
5: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 35 (precomputed): !KU( ~xx ) @ #vk.18
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.1,         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),         aeadEncrypt('emptyStr',                    hkdfExpand(<$cAEAD0,                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                 'K_2ae'>,                               hkdfExtract(~ltk, sk)),                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                    $cAEAD0),         'emptyStr'>)) @ #vk.25
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.3,                              h(<$cHash0.3,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.2,                                                         h(<$cHash0.2,                                                            <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, sk)),                                            h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.2),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                 $cAEAD0.3)) @ #vk.4
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.24
3: splitEqs(2)
4: splitEqs(3)

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 43 (precomputed):
    !KU( h(<$cHash0.1, 
            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
            aeadEncrypt('emptyStr',
                        hkdfExpand(<$cAEAD0, 
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                    'K_2ae'>,
                                   hkdfExtract(~ltk, sk)),
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                        $cAEAD0), 
            'emptyStr'>)
    ) @ #vk.25
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(3)
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.4
2: !KU( 'g'^x ) @ #vk.20
3: !KU( 'g'^~yy ) @ #vk.25
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
5: !KU( 'g'^~xx ) @ #vk.13

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 39 (directly): splitEqs(3)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.1,         <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>)) @ #vk.24
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.10
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                  'K_2ae'>,                hkdfExtract(~ltk.1, expSk))) @ #vk.23
3: splitEqs(0)
4: splitEqs(1)
5: !KU( 'g'^~xx ) @ #vk.19

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 42 (precomputed):
    !KU( h(<$cHash0.1, 
            <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>)
    ) @ #vk.24
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(0)
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^x>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
2: !KU( 'g'^x ) @ #vk.4
3: !KU( 'g'^~xx ) @ #vk.21
4: !KU( 'g'^~xx.1 ) @ #vk.28
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 2 (directly): splitEqs(0)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~yy*~xx.1*inv(~xx)) ) @ #vk.5
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>,                     'g'^(~yy*~xx.1*inv(~xx))>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
2: !KU( 'g'^~xx ) @ #vk.21
3: !KU( 'g'^~xx.1 ) @ #vk.28
4: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 51 (precomputed):
    !KU( 'g'^(~yy*~xx.1*inv(~xx)) ) @ #vk.5
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.20
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1,                                                             'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.4
2: !KU( 'g'^~yy ) @ #vk.25
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
4: !KU( 'g'^~xx ) @ #vk.13

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 47 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.20
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx.1 ) @ #vk.33
1: !KU( ~xx ) @ #vk.35
2: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>,                     'g'^(~yy*~xx.1*inv(~xx))>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
3: !KU( 'g'^~xx ) @ #vk.21
4: !KU( 'g'^~xx.1 ) @ #vk.28
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 65 (precomputed): !KU( ~xx.1 ) @ #vk.33
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.34
1: !KU( ~xx.1 ) @ #vk.35
2: !KU( ~xx ) @ #vk.37
3: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>,                     'g'^(~yy*~xx.1*inv(~xx))>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
4: !KU( 'g'^~xx ) @ #vk.21
5: !KU( 'g'^~xx.1 ) @ #vk.28
6: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 56 (precomputed): !KU( ~yy ) @ #vk.34
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.33
1: !KU( ~xx ) @ #vk.35
2: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>,                     'g'^(~yy*~xx.1*inv(~xx))>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
3: !KU( 'g'^~xx ) @ #vk.21
4: !KU( 'g'^~xx.1 ) @ #vk.28
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 55 (precomputed): !KU( ~yy ) @ #vk.33
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)) @ #vk.31
1: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.3,                              h(<$cHash0.3,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.2,                                                         h(<$cHash0.2,                                                            <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, sk)),                                            h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.2),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                 $cAEAD0.3)) @ #vk.6
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.26
3: splitEqs(2)
4: splitEqs(3)
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.32

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 49 (precomputed):
    !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
    ) @ #vk.31
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.12
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                  'K_2ae'>,                hkdfExtract(~ltk.1, expSk))) @ #vk.27
2: splitEqs(0)
3: splitEqs(1)
4: !KU( 'g'^~xx ) @ #vk.23
5: !KU( 'g'^~xx.1 ) @ #vk.34

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 20 (precomputed):
    !KU( hkdfExpand(<$cAEAD0, 
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                     'K_2ae'>,
                    hkdfExtract(~ltk, expSk))
    ) @ #vk.12
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.28
1: !KU( ~yy.1 ) @ #vk.30
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1,                                                             'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.5
3: !KU( 'g'^~yy ) @ #vk.25
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
5: !KU( 'g'^~xx ) @ #vk.14

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 50 (precomputed): !KU( ~yy ) @ #vk.28
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.3,                              h(<$cHash0.3,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.2,                                                         h(<$cHash0.2,                                                            <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, sk)),                                            h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.2),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                 $cAEAD0.3)) @ #vk.8
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.29
2: splitEqs(2)
3: splitEqs(3)
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.33
5: !KU( 'g'^~yy ) @ #vk.36

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 13 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0.3, 
                                 h(<$cHash0.3, 
                                    h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                       'g'^~yy.1>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0.2, 
                                                            h(<$cHash0.2, 
                                                               <'PSK', 'PSK', $cSUITE0.1, gx.1, 
                                                                $U.1, $V.1>, 
                                                               'g'^~yy.1>), 
                                                            'K_2ae'>,
                                                           hkdfExtract(~ltk.1, sk)),
                                                h(<$cHash0.2, 
                                                   <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                   'g'^~yy.1>),
                                                $cAEAD0.2), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk.1, sk)),
                     h(<$cHash0.3, 
                        h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                           'g'^~yy.1>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0.2, 
                                                h(<$cHash0.2, 
                                                   <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                   'g'^~yy.1>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk.1, sk)),
                                    h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                       'g'^~yy.1>),
                                    $cAEAD0.2), 
                        'emptyStr'>),
                     $cAEAD0.3)
    ) @ #vk.8
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.28
1: !KU( ~yy.1 ) @ #vk.30
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1,                                                             'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.5
3: !KU( 'g'^~yy ) @ #vk.25
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
5: !KU( 'g'^~xx ) @ #vk.14

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 60 (precomputed): !KU( ~xx ) @ #vk.28
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.28
1: !KU( ~yy.1 ) @ #vk.30
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1,                                                             'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.5
3: !KU( 'g'^~yy ) @ #vk.25
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
5: !KU( 'g'^~xx ) @ #vk.14

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 50 (precomputed): !KU( ~yy ) @ #vk.28
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.29
1: !KU( ~yy ) @ #vk.30
2: !KU( ~yy.1 ) @ #vk.32
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1,                                                             'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.5
4: !KU( 'g'^~yy ) @ #vk.25
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
6: !KU( 'g'^~xx ) @ #vk.14

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 51 (precomputed): !KU( ~xx ) @ #vk.29
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(1)
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^x>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
2: !KU( 'g'^x ) @ #vk.10
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.7

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 9 (directly): splitEqs(1)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, expSk) ) @ #vk.40
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                  'K_2ae'>,                hkdfExtract(~ltk.1, expSk))) @ #vk.30
2: splitEqs(0)
3: splitEqs(1)
4: !KU( 'g'^~xx ) @ #vk.26
5: !KU( 'g'^~xx.1 ) @ #vk.36

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 62 (precomputed):
    !KU( hkdfExtract(~ltk, expSk) ) @ #vk.40
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(1)
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^x>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
2: !KU( 'g'^x ) @ #vk.10
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.7

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 9 (directly): splitEqs(1)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.3,                              h(<$cHash0.3,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.2,                                                         h(<$cHash0.2,                                                            <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1,                                                             $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, sk)),                                            h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.2),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                 $cAEAD0.3)) @ #vk.8
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.29
2: splitEqs(2)
3: splitEqs(3)
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.33
5: !KU( 'g'^~yy ) @ #vk.36

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 13 (precomputed):
    !KU( aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0.3, 
                                 h(<$cHash0.3, 
                                    h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                       'g'^~yy.1>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0.2, 
                                                            h(<$cHash0.2, 
                                                               <'PSK', 'PSK', $cSUITE0.1, gx.1, 
                                                                $U.1, $V.1>, 
                                                               'g'^~yy.1>), 
                                                            'K_2ae'>,
                                                           hkdfExtract(~ltk.1, sk)),
                                                h(<$cHash0.2, 
                                                   <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                   'g'^~yy.1>),
                                                $cAEAD0.2), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk.1, sk)),
                     h(<$cHash0.3, 
                        h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                           'g'^~yy.1>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0.2, 
                                                h(<$cHash0.2, 
                                                   <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                   'g'^~yy.1>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk.1, sk)),
                                    h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                       'g'^~yy.1>),
                                    $cAEAD0.2), 
                        'emptyStr'>),
                     $cAEAD0.3)
    ) @ #vk.8
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
2: !KU( 'g'^~xx ) @ #vk.24
3: !KU( 'g'^~xx.1 ) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.7

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 80 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.3,         h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,            'g'^~yy.1>),         aeadEncrypt('emptyStr',                    hkdfExpand(<$cAEAD0.2,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 'K_2ae'>,                               hkdfExtract(~ltk.1, sk)),                    h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                    $cAEAD0.2),         'emptyStr'>)) @ #vk.38
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.31
2: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.37
3: splitEqs(2)
4: splitEqs(3)
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.34
6: !KU( 'g'^~yy ) @ #vk.36

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 72 (precomputed):
    !KU( h(<$cHash0.3, 
            h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
               'g'^~yy.1>), 
            aeadEncrypt('emptyStr',
                        hkdfExpand(<$cAEAD0.2, 
                                    h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                       'g'^~yy.1>), 
                                    'K_2ae'>,
                                   hkdfExtract(~ltk.1, sk)),
                        h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                           'g'^~yy.1>),
                        $cAEAD0.2), 
            'emptyStr'>)
    ) @ #vk.38
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(2)
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
2: !KU( 'g'^x ) @ #vk.20
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.36
5: !KU( 'g'^~yy.1 ) @ #vk.38
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
7: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 26 (directly): splitEqs(2)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.40
1: !KU( ~yy ) @ #vk.41
2: !KU( ~xx.1 ) @ #vk.43
3: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
4: !KU( 'g'^~xx ) @ #vk.24
5: !KU( 'g'^~xx.1 ) @ #vk.34
6: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 84 (precomputed): !KU( ~xx ) @ #vk.40
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.39
1: !KU( ~xx.1 ) @ #vk.41
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 93 (precomputed): !KU( ~xx ) @ #vk.39
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.39
1: !KU( ~xx.1 ) @ #vk.41
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 83 (precomputed): !KU( ~yy ) @ #vk.39
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
2: !KU( 'g'^~xx ) @ #vk.24
3: !KU( 'g'^~xx.1 ) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.7

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 75 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy.1*inv(~yy)) ) @ #vk.20
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0,                        <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                      >),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0,                                                <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)),                                                 $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0,                                    <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>,                                    'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0,                                 <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                               >),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0,                     <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                   >),                 $cAEAD0)) @ #vk.34
3: !KU( 'g'^~yy ) @ #vk.36
4: !KU( 'g'^~yy.1 ) @ #vk.38
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
6: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 75 (precomputed):
    !KU( 'g'^(~xx*~yy.1*inv(~yy)) ) @ #vk.20
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.41
1: !KU( ~yy ) @ #vk.42
2: !KU( ~xx.1 ) @ #vk.44
3: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
4: !KU( 'g'^~xx ) @ #vk.24
5: !KU( 'g'^~xx.1 ) @ #vk.34
6: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 79 (precomputed): !KU( ~xx ) @ #vk.41
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.40
1: !KU( ~xx.1 ) @ #vk.42
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.40
1: !KU( ~xx.1 ) @ #vk.42
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 78 (precomputed): !KU( ~yy ) @ #vk.40
  solved goal nr. 88 (precomputed): !KU( ~xx ) @ #vk.40
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.42
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                  'K_2ae'>,                hkdfExtract(~ltk.1, expSk))) @ #vk.31
2: splitEqs(0)
3: splitEqs(1)
4: !KU( 'g'^~xx ) @ #vk.27
5: !KU( 'g'^~xx.1 ) @ #vk.37

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 68 (precomputed): !KU( ~ltk ) @ #vk.42
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.42
1: !KU( ~yy.1 ) @ #vk.43
2: !KU( ~yy ) @ #vk.45
3: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0,                        <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                      >),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0,                                                <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)),                                                 $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0,                                    <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>,                                    'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0,                                 <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                               >),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0,                     <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                   >),                 $cAEAD0)) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.36
6: !KU( 'g'^~yy.1 ) @ #vk.38
7: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
8: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 80 (precomputed): !KU( ~xx ) @ #vk.42
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.41
1: !KU( ~yy ) @ #vk.43
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0,                        <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                      >),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0,                                                <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)),                                                 $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0,                                    <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>,                                    'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0,                                 <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                               >),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0,                     <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                   >),                 $cAEAD0)) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.36
5: !KU( 'g'^~yy.1 ) @ #vk.38
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
7: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 89 (precomputed): !KU( ~xx ) @ #vk.41
  simplified formula:
      "((#vr.45 = #i) ∨ (#i < #vr.45))"
    to
      "⊥"
  solved goal nr. 72 (simplified): (#vr.45 = #i)  ∥ (#i < #vr.45)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy.1 ) @ #vk.41
1: !KU( ~yy ) @ #vk.43
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0,                        <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                      >),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0,                                                <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)),                                                 $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0,                                    <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>,                                    'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0,                                 <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                               >),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0,                     <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                   >),                 $cAEAD0)) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.36
5: !KU( 'g'^~yy.1 ) @ #vk.38
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
7: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 79 (precomputed): !KU( ~yy.1 ) @ #vk.41
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.18
1: !KU( ~yy ) @ #vk.19
2: !KU( ~xx.1 ) @ #vk.21
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                                 'g'^(~xx*~yy*inv(~xx.1))>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                 $cAEAD0.1)) @ #vk.5
4: !KU( 'g'^~xx ) @ #vk.12
5: !KU( 'g'^~yy ) @ #vk.3

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 35 (precomputed): !KU( ~xx ) @ #vk.18
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,         'g'^~yy.1>)) @ #vk.44
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.33
2: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.39
3: splitEqs(2)
4: splitEqs(3)
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.36
6: !KU( 'g'^~yy ) @ #vk.38
7: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.45

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 78 (precomputed):
    !KU( h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
            'g'^~yy.1>)
    ) @ #vk.44
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.1,         <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>)) @ #vk.24
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.10
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                  'K_2ae'>,                hkdfExtract(~ltk.1, expSk))) @ #vk.23
3: splitEqs(0)
4: splitEqs(1)
5: !KU( 'g'^~xx ) @ #vk.19

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 42 (precomputed):
    !KU( h(<$cHash0.1, 
            <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>)
    ) @ #vk.24
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(0)
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^x>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
2: !KU( 'g'^x ) @ #vk.4
3: !KU( 'g'^~xx ) @ #vk.21
4: !KU( 'g'^~xx.1 ) @ #vk.28
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 2 (directly): splitEqs(0)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~yy*~xx.1*inv(~xx)) ) @ #vk.5
1: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>,                     'g'^(~yy*~xx.1*inv(~xx))>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
2: !KU( 'g'^~xx ) @ #vk.21
3: !KU( 'g'^~xx.1 ) @ #vk.28
4: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 51 (precomputed):
    !KU( 'g'^(~yy*~xx.1*inv(~xx)) ) @ #vk.5
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.36
1: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.42
2: splitEqs(2)
3: splitEqs(3)
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.39
5: !KU( 'g'^~yy ) @ #vk.41
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.46
7: !KU( 'g'^~yy.1 ) @ #vk.49

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 42 (precomputed):
    !KU( hkdfExpand(<$cAEAD0.1, 
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>), 
                     'K_3ae'>,
                    hkdfExtract(~ltk, sk))
    ) @ #vk.36
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.34
1: !KU( ~xx.1 ) @ #vk.35
2: !KU( ~xx ) @ #vk.37
3: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>,                     'g'^(~yy*~xx.1*inv(~xx))>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
4: !KU( 'g'^~xx ) @ #vk.21
5: !KU( 'g'^~xx.1 ) @ #vk.28
6: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 56 (precomputed): !KU( ~yy ) @ #vk.34
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx.1 ) @ #vk.33
1: !KU( ~xx ) @ #vk.35
2: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>,                     'g'^(~yy*~xx.1*inv(~xx))>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
3: !KU( 'g'^~xx ) @ #vk.21
4: !KU( 'g'^~xx.1 ) @ #vk.28
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 65 (precomputed): !KU( ~xx.1 ) @ #vk.33
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.33
1: !KU( ~xx ) @ #vk.35
2: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>,                     'g'^(~yy*~xx.1*inv(~xx))>),                  'K_2ae'>,                hkdfExtract(~ltk, 'g'^(~yy*~xx.1)))) @ #vk.10
3: !KU( 'g'^~xx ) @ #vk.21
4: !KU( 'g'^~xx.1 ) @ #vk.28
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 55 (precomputed): !KU( ~yy ) @ #vk.33
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0,                  h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>),                  'K_2ae'>,                hkdfExtract(~ltk, expSk))) @ #vk.12
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                  'K_2ae'>,                hkdfExtract(~ltk.1, expSk))) @ #vk.27
2: splitEqs(0)
3: splitEqs(1)
4: !KU( 'g'^~xx ) @ #vk.23
5: !KU( 'g'^~xx.1 ) @ #vk.34

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 20 (precomputed):
    !KU( hkdfExpand(<$cAEAD0, 
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                     'K_2ae'>,
                    hkdfExtract(~ltk, expSk))
    ) @ #vk.12
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, sk) ) @ #vk.52
1: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.46
2: splitEqs(2)
3: splitEqs(3)
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.43
5: !KU( 'g'^~yy ) @ #vk.45
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.49
7: !KU( 'g'^~yy.1 ) @ #vk.51

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 100 (precomputed):
    !KU( hkdfExtract(~ltk, sk) ) @ #vk.52
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(3)
1: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
2: !KU( 'g'^x ) @ #vk.35
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 39 (directly): splitEqs(3)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(3)
1: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
2: !KU( 'g'^x ) @ #vk.35
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 39 (directly): splitEqs(3)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, expSk) ) @ #vk.40
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                  'K_2ae'>,                hkdfExtract(~ltk.1, expSk))) @ #vk.30
2: splitEqs(0)
3: splitEqs(1)
4: !KU( 'g'^~xx ) @ #vk.26
5: !KU( 'g'^~xx.1 ) @ #vk.36

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 62 (precomputed):
    !KU( hkdfExtract(~ltk, expSk) ) @ #vk.40
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(1)
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^x>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
2: !KU( 'g'^x ) @ #vk.10
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.7

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 9 (directly): splitEqs(1)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(1)
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^x>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
2: !KU( 'g'^x ) @ #vk.10
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.7

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 9 (directly): splitEqs(1)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
2: !KU( 'g'^~xx ) @ #vk.24
3: !KU( 'g'^~xx.1 ) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.7

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 80 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35
1: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
3: !KU( 'g'^~yy ) @ #vk.43
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
5: !KU( 'g'^~yy.1 ) @ #vk.49
6: !KU( 'g'^~xx ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 125 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.40
1: !KU( ~yy ) @ #vk.41
2: !KU( ~xx.1 ) @ #vk.43
3: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
4: !KU( 'g'^~xx ) @ #vk.24
5: !KU( 'g'^~xx.1 ) @ #vk.34
6: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 84 (precomputed): !KU( ~xx ) @ #vk.40
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.39
1: !KU( ~xx.1 ) @ #vk.41
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 93 (precomputed): !KU( ~xx ) @ #vk.39
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.39
1: !KU( ~xx.1 ) @ #vk.41
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 83 (precomputed): !KU( ~yy ) @ #vk.39
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
2: !KU( 'g'^~xx ) @ #vk.24
3: !KU( 'g'^~xx.1 ) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.7

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 75 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.52
1: !KU( ~yy ) @ #vk.53
2: !KU( ~yy.1 ) @ #vk.55
3: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
5: !KU( 'g'^~yy ) @ #vk.43
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
7: !KU( 'g'^~yy.1 ) @ #vk.49
8: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 129 (precomputed): !KU( ~xx ) @ #vk.52
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.51
1: !KU( ~yy.1 ) @ #vk.53
2: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 128 (precomputed): !KU( ~yy ) @ #vk.51
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.51
1: !KU( ~yy.1 ) @ #vk.53
2: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 138 (precomputed): !KU( ~xx ) @ #vk.51
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.41
1: !KU( ~yy ) @ #vk.42
2: !KU( ~xx.1 ) @ #vk.44
3: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
4: !KU( 'g'^~xx ) @ #vk.24
5: !KU( 'g'^~xx.1 ) @ #vk.34
6: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 79 (precomputed): !KU( ~xx ) @ #vk.41
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.40
1: !KU( ~xx.1 ) @ #vk.42
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 78 (precomputed): !KU( ~yy ) @ #vk.40
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.40
1: !KU( ~xx.1 ) @ #vk.42
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     'g'^(~xx*~yy*inv(~xx.1))>),                  'K_2ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.28
3: !KU( 'g'^~xx ) @ #vk.24
4: !KU( 'g'^~xx.1 ) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.8

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 88 (precomputed): !KU( ~xx ) @ #vk.40
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35
1: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
3: !KU( 'g'^~yy ) @ #vk.43
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
5: !KU( 'g'^~yy.1 ) @ #vk.49
6: !KU( 'g'^~xx ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 107 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.42
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>,                     gy.1>),                  'K_2ae'>,                hkdfExtract(~ltk.1, expSk))) @ #vk.31
2: splitEqs(0)
3: splitEqs(1)
4: !KU( 'g'^~xx ) @ #vk.27
5: !KU( 'g'^~xx.1 ) @ #vk.37

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 68 (precomputed): !KU( ~ltk ) @ #vk.42
  simplified formula:
      "((#vr.45 = #i) ∨ (#i < #vr.45))"
    to
      "⊥"
  solved goal nr. 72 (simplified): (#vr.45 = #i)  ∥ (#i < #vr.45)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.52
1: !KU( ~yy.1 ) @ #vk.54
2: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 120 (precomputed): !KU( ~xx ) @ #vk.52
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.53
1: !KU( ~yy ) @ #vk.54
2: !KU( ~yy.1 ) @ #vk.56
3: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
5: !KU( 'g'^~yy ) @ #vk.43
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
7: !KU( 'g'^~yy.1 ) @ #vk.49
8: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 111 (precomputed): !KU( ~xx ) @ #vk.53
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.52
1: !KU( ~yy.1 ) @ #vk.54
2: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 110 (precomputed): !KU( ~yy ) @ #vk.52
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.54
1: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.47
2: splitEqs(2)
3: splitEqs(3)
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.44
5: !KU( 'g'^~yy ) @ #vk.46
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.50
7: !KU( 'g'^~yy.1 ) @ #vk.52

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 106 (precomputed): !KU( ~ltk ) @ #vk.54
  simplified formula:
      "((#vr.57 = #i) ∨ (#i < #vr.57))"
    to
      "⊥"
  solved goal nr. 110 (simplified): (#vr.57 = #i)  ∥ (#i < #vr.57)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.29
1: !KU( ~yy ) @ #vk.30
2: !KU( ~yy.1 ) @ #vk.32
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1,                                                             'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.5
4: !KU( 'g'^~yy ) @ #vk.25
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
6: !KU( 'g'^~xx ) @ #vk.14

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 51 (precomputed): !KU( ~xx ) @ #vk.29
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.28
1: !KU( ~yy.1 ) @ #vk.30
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2,                                 h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                 aeadEncrypt('emptyStr',                                            hkdfExpand(<$cAEAD0.1,                                                         h(<$cHash0.1,                                                            <'PSK', 'PSK', $cSUITE0.1,                                                             'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                                            'g'^~yy.1>),                                                         'K_2ae'>,                                                       hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                            h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                            $cAEAD0.1),                                 'emptyStr'>),                              'K_3ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                 $cAEAD0.2)) @ #vk.5
3: !KU( 'g'^~yy ) @ #vk.25
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.26
5: !KU( 'g'^~xx ) @ #vk.14

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 60 (precomputed): !KU( ~xx ) @ #vk.28
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.3,         h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,            'g'^~yy.1>),         aeadEncrypt('emptyStr',                    hkdfExpand(<$cAEAD0.2,                                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                 'K_2ae'>,                               hkdfExtract(~ltk.1, sk)),                    h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                    $cAEAD0.2),         'emptyStr'>)) @ #vk.38
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.31
2: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.37
3: splitEqs(2)
4: splitEqs(3)
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.34
6: !KU( 'g'^~yy ) @ #vk.36

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 72 (precomputed):
    !KU( h(<$cHash0.3, 
            h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
               'g'^~yy.1>), 
            aeadEncrypt('emptyStr',
                        hkdfExpand(<$cAEAD0.2, 
                                    h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                       'g'^~yy.1>), 
                                    'K_2ae'>,
                                   hkdfExtract(~ltk.1, sk)),
                        h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                           'g'^~yy.1>),
                        $cAEAD0.2), 
            'emptyStr'>)
    ) @ #vk.38
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(2)
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
2: !KU( 'g'^x ) @ #vk.20
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^x, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.36
5: !KU( 'g'^~yy.1 ) @ #vk.38
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
7: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 26 (directly): splitEqs(2)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy.1*inv(~yy)) ) @ #vk.20
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0,                        <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                      >),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0,                                                <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)),                                                 $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0,                                    <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>,                                    'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0,                                 <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                               >),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0,                     <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                   >),                 $cAEAD0)) @ #vk.34
3: !KU( 'g'^~yy ) @ #vk.36
4: !KU( 'g'^~yy.1 ) @ #vk.38
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
6: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 75 (precomputed):
    !KU( 'g'^(~xx*~yy.1*inv(~yy)) ) @ #vk.20
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.41
1: !KU( ~yy ) @ #vk.43
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0,                        <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                      >),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0,                                                <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)),                                                 $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0,                                    <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>,                                    'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0,                                 <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                               >),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0,                     <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                   >),                 $cAEAD0)) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.36
5: !KU( 'g'^~yy.1 ) @ #vk.38
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
7: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 89 (precomputed): !KU( ~xx ) @ #vk.41
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.42
1: !KU( ~yy.1 ) @ #vk.43
2: !KU( ~yy ) @ #vk.45
3: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0,                        <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                      >),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0,                                                <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)),                                                 $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0,                                    <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>,                                    'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0,                                 <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                               >),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0,                     <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                   >),                 $cAEAD0)) @ #vk.34
5: !KU( 'g'^~yy ) @ #vk.36
6: !KU( 'g'^~yy.1 ) @ #vk.38
7: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
8: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 80 (precomputed): !KU( ~xx ) @ #vk.42
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy.1 ) @ #vk.41
1: !KU( ~yy ) @ #vk.43
2: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0,                        <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                      >),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0,                                                <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)),                                                 $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                                h(<$cHash0,                                    <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>,                                    'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, 'g'^(~xx*~yy.1)))) @ #vk.31
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0,                                 <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                               >),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy.1))),                 h(<$cHash0,                     <'PSK', 'PSK', $cSUITE0, 'g'^(~xx*~yy.1*inv(~yy)), $U, $V>, 'g'^~yy                   >),                 $cAEAD0)) @ #vk.34
4: !KU( 'g'^~yy ) @ #vk.36
5: !KU( 'g'^~yy.1 ) @ #vk.38
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy.1))),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.39
7: !KU( 'g'^~xx ) @ #vk.27

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 79 (precomputed): !KU( ~yy.1 ) @ #vk.41
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,         'g'^~yy.1>)) @ #vk.44
1: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.33
2: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.39
3: splitEqs(2)
4: splitEqs(3)
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.36
6: !KU( 'g'^~yy ) @ #vk.38
7: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.45

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 78 (precomputed):
    !KU( h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
            'g'^~yy.1>)
    ) @ #vk.44
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExpand(<$cAEAD0.1,                  h(<$cHash0.1,                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0,                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,                                                'g'^~yy>),                                             'K_2ae'>,                                           hkdfExtract(~ltk, sk)),                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                                $cAEAD0),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk, sk))) @ #vk.36
1: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.42
2: splitEqs(2)
3: splitEqs(3)
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.39
5: !KU( 'g'^~yy ) @ #vk.41
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.46
7: !KU( 'g'^~yy.1 ) @ #vk.49

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 42 (precomputed):
    !KU( hkdfExpand(<$cAEAD0.1, 
                     h(<$cHash0.1, 
                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, 
                                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                   'g'^~yy>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk, sk)),
                                    h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                    $cAEAD0), 
                        'emptyStr'>), 
                     'K_3ae'>,
                    hkdfExtract(~ltk, sk))
    ) @ #vk.36
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( hkdfExtract(~ltk, sk) ) @ #vk.52
1: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.46
2: splitEqs(2)
3: splitEqs(3)
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.43
5: !KU( 'g'^~yy ) @ #vk.45
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.49
7: !KU( 'g'^~yy.1 ) @ #vk.51

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 100 (precomputed):
    !KU( hkdfExtract(~ltk, sk) ) @ #vk.52
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(3)
1: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
2: !KU( 'g'^x ) @ #vk.35
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 39 (directly): splitEqs(3)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: splitEqs(3)
1: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
2: !KU( 'g'^x ) @ #vk.35
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^x, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 39 (directly): splitEqs(3)
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35
1: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
3: !KU( 'g'^~yy ) @ #vk.43
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
5: !KU( 'g'^~yy.1 ) @ #vk.49
6: !KU( 'g'^~xx ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 125 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.51
1: !KU( ~yy.1 ) @ #vk.53
2: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 138 (precomputed): !KU( ~xx ) @ #vk.51
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.52
1: !KU( ~yy ) @ #vk.53
2: !KU( ~yy.1 ) @ #vk.55
3: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
5: !KU( 'g'^~yy ) @ #vk.43
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
7: !KU( 'g'^~yy.1 ) @ #vk.49
8: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 129 (precomputed): !KU( ~xx ) @ #vk.52
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.51
1: !KU( ~yy.1 ) @ #vk.53
2: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 128 (precomputed): !KU( ~yy ) @ #vk.51
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35
1: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
2: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
3: !KU( 'g'^~yy ) @ #vk.43
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
5: !KU( 'g'^~yy.1 ) @ #vk.49
6: !KU( 'g'^~xx ) @ #vk.28

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 107 (precomputed):
    !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.52
1: !KU( ~yy.1 ) @ #vk.54
2: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 120 (precomputed): !KU( ~xx ) @ #vk.52
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~yy ) @ #vk.52
1: !KU( ~yy.1 ) @ #vk.54
2: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
3: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
4: !KU( 'g'^~yy ) @ #vk.43
5: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
6: !KU( 'g'^~yy.1 ) @ #vk.49
7: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 110 (precomputed): !KU( ~yy ) @ #vk.52
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~xx ) @ #vk.53
1: !KU( ~yy ) @ #vk.54
2: !KU( ~yy.1 ) @ #vk.56
3: !KU( hkdfExpand(<$cAEAD0.2,                  h(<$cHash0.2,                     h(<$cHash0.1,                        <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.1,                                             h(<$cHash0.1,                                                <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)),                                                 $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                                h(<$cHash0.1,                                    <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1                                   >,                                    'g'^~yy.1>),                                $cAEAD0.1),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, 'g'^(~xx*~yy)))) @ #vk.44
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, 'g'^(~xx*~yy))),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.41
5: !KU( 'g'^~yy ) @ #vk.43
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.1,                              h(<$cHash0.1,                                 <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, 'g'^(~xx*~yy))),                 h(<$cHash0.1,                     <'PSK', 'PSK', $cSUITE0.1, 'g'^(~xx*~yy*inv(~yy.1)), $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.1)) @ #vk.47
7: !KU( 'g'^~yy.1 ) @ #vk.49
8: !KU( 'g'^~xx ) @ #vk.29

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 111 (precomputed): !KU( ~xx ) @ #vk.53
>>>>>>>>>>>>>>>>>>>>>>>> START INPUT
0: !KU( ~ltk ) @ #vk.54
1: !KU( hkdfExpand(<$cAEAD0.3,                  h(<$cHash0.3,                     h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                        'g'^~yy.1>),                     aeadEncrypt('emptyStr',                                hkdfExpand(<$cAEAD0.2,                                             h(<$cHash0.2,                                                <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                                'g'^~yy.1>),                                             'K_2ae'>,                                           hkdfExtract(~ltk.1, sk)),                                h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                    'g'^~yy.1>),                                $cAEAD0.2),                     'emptyStr'>),                  'K_3ae'>,                hkdfExtract(~ltk.1, sk))) @ #vk.47
2: splitEqs(2)
3: splitEqs(3)
4: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0,                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                              'K_2ae'>,                            hkdfExtract(~ltk, sk)),                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),                 $cAEAD0)) @ #vk.44
5: !KU( 'g'^~yy ) @ #vk.46
6: !KU( aeadEncrypt('emptyStr',                 hkdfExpand(<$cAEAD0.2,                              h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                                 'g'^~yy.1>),                              'K_2ae'>,                            hkdfExtract(~ltk.1, sk)),                 h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>,                     'g'^~yy.1>),                 $cAEAD0.2)) @ #vk.50
7: !KU( 'g'^~yy.1 ) @ #vk.52

>>>>>>>>>>>>>>>>>>>>>>>> START OUTPUT

>>>>>>>>>>>>>>>>>>>>>>>> END Oracle call

  solved goal nr. 106 (precomputed): !KU( ~ltk ) @ #vk.54
  simplified formula:
      "((#vr.57 = #i) ∨ (#i < #vr.57))"
    to
      "⊥"
  solved goal nr. 110 (simplified): (#vr.57 = #i)  ∥ (#i < #vr.57)
 OK.

theory edhoc_PSK_PSK_ACTIVE begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, xor
functions: aeadDecrypt/4, aeadEncrypt/4, decrypt/3, fst/1, h/1,
           hkdfExpand/2, hkdfExtract/2, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    aeadDecrypt(key, aeadEncrypt(key, pt, aad, algoId), aad, algoId) = pt,
    decrypt(key, aeadEncrypt(key, pt, aad, algoID), algoId) = pt,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



restriction Eq:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

rule (modulo E) I1_PSK_PSK:
   [ !LTK_PSK( <$U, $V>, ~ltk ), Fr( ~xx ), Fr( ~tid ) ]
  --[ I1( ~tid, $U, $V, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V> ) ]->
   [
   StI1_PSK_PSK( $U, ~ltk, $V, ~xx,
                 <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, ~tid
   ),
   Out( <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R2_PSK_PSK:
   [
   !LTK_PSK( <$U, $V>, ~ltk ), In( <'PSK', 'PSK', $cSUITE0, gx, $U, $V> ),
   Fr( ~yy ), Fr( ~tid )
   ]
  --[
  ExpRunningR( ~tid, $V, gx^~yy ),
  R2( ~tid, $V, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,
      <'g'^~yy, 
       aeadEncrypt('emptyStr',
                   hkdfExpand(<$cAEAD0, 
                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'>,
                              hkdfExtract(~ltk, gx^~yy)),
                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
      >
  )
  ]->
   [
   StR2_PSK_PSK( $U, $V, ~ltk, ~yy, hkdfExtract(~ltk, gx^~yy),
                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                 aeadEncrypt('emptyStr',
                             hkdfExpand(<$cAEAD0, 
                                         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'
                                        >,
                                        hkdfExtract(~ltk, gx^~yy)),
                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0),
                 gx^~yy, ~tid, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,
                 <'g'^~yy, 
                  aeadEncrypt('emptyStr',
                              hkdfExpand(<$cAEAD0, 
                                          h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'
                                         >,
                                         hkdfExtract(~ltk, gx^~yy)),
                              h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
                 >
   ),
   Out( <'g'^~yy, 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'>,
                                hkdfExtract(~ltk, gx^~yy)),
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
        >
   )
   ]

  /*
  rule (modulo AC) R2_PSK_PSK:
     [
     !LTK_PSK( <$U, $V>, ~ltk ), In( <'PSK', 'PSK', $cSUITE0, gx, $U, $V> ),
     Fr( ~yy ), Fr( ~tid )
     ]
    --[
    ExpRunningR( ~tid, $V, z ),
    R2( ~tid, $V, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,
        <'g'^~yy, 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'>,
                                hkdfExtract(~ltk, z)),
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
        >
    )
    ]->
     [
     StR2_PSK_PSK( $U, $V, ~ltk, ~yy, hkdfExtract(~ltk, z),
                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                   aeadEncrypt('emptyStr',
                               hkdfExpand(<$cAEAD0, 
                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                           'K_2ae'>,
                                          hkdfExtract(~ltk, z)),
                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0),
                   z, ~tid, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>,
                   <'g'^~yy, 
                    aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0, 
                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                            'K_2ae'>,
                                           hkdfExtract(~ltk, z)),
                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
                   >
     ),
     Out( <'g'^~yy, 
           aeadEncrypt('emptyStr',
                       hkdfExpand(<$cAEAD0, 
                                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 'K_2ae'>,
                                  hkdfExtract(~ltk, z)),
                       h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0)
          >
     )
     ]
    variants (modulo AC)
    1. ~yy   = ~yy.14
       gx    = gx.15
       z     = gx.15^~yy.14
    
    2. ~yy   = ~yy.16
       gx    = z.19^inv(~yy.16)
       z     = z.19
    
    3. ~yy   = ~yy.68
       gx    = x.126^x.127
       z     = x.126^(~yy.68*x.127)
    
    4. ~yy   = ~yy.69
       gx    = x.128^inv((~yy.69*x.129))
       z     = x.128^inv(x.129)
    
    5. ~yy   = ~yy.69
       gx    = x.128^(x.129*inv(~yy.69))
       z     = x.128^x.129
    
    6. ~yy   = ~yy.70
       gx    = x.129^(x.130*inv((~yy.70*x.131)))
       z     = x.129^(x.130*inv(x.131))
  */

rule (modulo E) I3_PSK_PSK:
   [
   StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ),
   In( <gy, 
        aeadEncrypt('emptyStr',
                    hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                               hkdfExtract(~ltk, gy^~xx)),
                    h(<$cHash0, m1, gy>), $cAEAD0)
       >
   )
   ]
  --[
  ExpCommitI( ~tid, $U, $V, gy^~xx ), CommitI( ~tid, $U, $V, gy^~xx ),
  ExpRunningI( ~tid, $U, $V, gy^~xx ), RunningI( ~tid, $U, $V, gy^~xx ),
  I3( ~tid, $U, $V, m1,
      <gy, 
       aeadEncrypt('emptyStr',
                   hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                              hkdfExtract(~ltk, gy^~xx)),
                   h(<$cHash0, m1, gy>), $cAEAD0)
      >,
      <'emptyStr', 
       aeadEncrypt('emptyStr',
                   hkdfExpand(<$cAEAD0, 
                               h(<$cHash0, h(<$cHash0, m1, gy>), 
                                  aeadEncrypt('emptyStr',
                                              hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                         hkdfExtract(~ltk, gy^~xx)),
                                              h(<$cHash0, m1, gy>), $cAEAD0), 
                                  'emptyStr'>), 
                               'K_3ae'>,
                              hkdfExtract(~ltk, gy^~xx)),
                   h(<$cHash0, h(<$cHash0, m1, gy>), 
                      aeadEncrypt('emptyStr',
                                  hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                             hkdfExtract(~ltk, gy^~xx)),
                                  h(<$cHash0, m1, gy>), $cAEAD0), 
                      'emptyStr'>),
                   $cAEAD0)
      >
  ),
  Eq( '1', '1' )
  ]->
   [
   Out( <'emptyStr', 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, h(<$cHash0, m1, gy>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                           hkdfExtract(~ltk, gy^~xx)),
                                                h(<$cHash0, m1, gy>), $cAEAD0), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk, gy^~xx)),
                     h(<$cHash0, h(<$cHash0, m1, gy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                               hkdfExtract(~ltk, gy^~xx)),
                                    h(<$cHash0, m1, gy>), $cAEAD0), 
                        'emptyStr'>),
                     $cAEAD0)
        >
   )
   ]

  /*
  rule (modulo AC) I3_PSK_PSK:
     [
     StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ),
     In( <gy, 
          aeadEncrypt('emptyStr',
                      hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                 hkdfExtract(~ltk, z)),
                      h(<$cHash0, m1, gy>), $cAEAD0)
         >
     )
     ]
    --[
    ExpCommitI( ~tid, $U, $V, z ), CommitI( ~tid, $U, $V, z ),
    ExpRunningI( ~tid, $U, $V, z ), RunningI( ~tid, $U, $V, z ),
    I3( ~tid, $U, $V, m1,
        <gy, 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                hkdfExtract(~ltk, z)),
                     h(<$cHash0, m1, gy>), $cAEAD0)
        >,
        <'emptyStr', 
         aeadEncrypt('emptyStr',
                     hkdfExpand(<$cAEAD0, 
                                 h(<$cHash0, h(<$cHash0, m1, gy>), 
                                    aeadEncrypt('emptyStr',
                                                hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                           hkdfExtract(~ltk, z)),
                                                h(<$cHash0, m1, gy>), $cAEAD0), 
                                    'emptyStr'>), 
                                 'K_3ae'>,
                                hkdfExtract(~ltk, z)),
                     h(<$cHash0, h(<$cHash0, m1, gy>), 
                        aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                               hkdfExtract(~ltk, z)),
                                    h(<$cHash0, m1, gy>), $cAEAD0), 
                        'emptyStr'>),
                     $cAEAD0)
        >
    ),
    Eq( '1', '1' )
    ]->
     [
     Out( <'emptyStr', 
           aeadEncrypt('emptyStr',
                       hkdfExpand(<$cAEAD0, 
                                   h(<$cHash0, h(<$cHash0, m1, gy>), 
                                      aeadEncrypt('emptyStr',
                                                  hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                             hkdfExtract(~ltk, z)),
                                                  h(<$cHash0, m1, gy>), $cAEAD0), 
                                      'emptyStr'>), 
                                   'K_3ae'>,
                                  hkdfExtract(~ltk, z)),
                       h(<$cHash0, h(<$cHash0, m1, gy>), 
                          aeadEncrypt('emptyStr',
                                      hkdfExpand(<$cAEAD0, h(<$cHash0, m1, gy>), 'K_2ae'>,
                                                 hkdfExtract(~ltk, z)),
                                      h(<$cHash0, m1, gy>), $cAEAD0), 
                          'emptyStr'>),
                       $cAEAD0)
          >
     )
     ]
    variants (modulo AC)
    1. ~xx   = ~xx.15
       gy    = gy.16
       z     = gy.16^~xx.15
    
    2. ~xx   = ~xx.19
       gy    = z.24^inv(~xx.19)
       z     = z.24
    
    3. ~xx   = ~xx.39
       gy    = x.69^x.70
       z     = x.69^(~xx.39*x.70)
    
    4. ~xx   = ~xx.40
       gy    = x.71^inv((~xx.40*x.72))
       z     = x.71^inv(x.72)
    
    5. ~xx   = ~xx.40
       gy    = x.71^(x.72*inv(~xx.40))
       z     = x.71^x.72
    
    6. ~xx   = ~xx.41
       gy    = x.72^(x.73*inv((~xx.41*x.74)))
       z     = x.72^(x.73*inv(x.74))
  */

rule (modulo E) R4_PSK_PSK:
   [
   StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, gxy, ~tid,
                 m1, m2
   ),
   In( <'emptyStr', 
        aeadEncrypt('emptyStr',
                    hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), 
                                'K_3ae'>,
                               prk_3e2m),
                    h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)
       >
   )
   ]
  --[
  ExpCommitR( ~tid, $U, $V, gxy ), CommitR( ~tid, $U, $V, gxy ),
  R4( ~tid, $U, $V, m1, m2,
      <'emptyStr', 
       aeadEncrypt('emptyStr',
                   hkdfExpand(<$cAEAD0, h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), 
                               'K_3ae'>,
                              prk_3e2m),
                   h(<$cHash0, TH_2, CIPHERTEXT_2, 'emptyStr'>), $cAEAD0)
      >
  )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) registerLTK_SIG:
   [ Fr( ~ltk ) ]
  --[ UniqLTK( $A, ~ltk ) ]->
   [ !LTK_SIG( $A, ~ltk ), !PK_SIG( $A, pk(~ltk) ), Out( <$A, pk(~ltk)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) registerLTK_STAT:
   [ Fr( ~ltk ) ]
  --[ UniqLTK( $A, 'g'^~ltk ) ]->
   [ !LTK_STAT( $A, ~ltk ), !PK_STAT( $A, 'g'^~ltk ), Out( <$A, 'g'^~ltk> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) registerLTK_PSK:
   [ Fr( ~ltk ) ]
  --[ UniqLTK( <$A, $B>, ~ltk ) ]->
   [ !LTK_PSK( <$A, $B>, ~ltk ) ]

  /* has exactly the trivial AC variant */

restriction uniqLTKs:
  "∀ id k1 k2 #i #j.
    ((UniqLTK( id, k1 ) @ #i) ∧ (UniqLTK( id, k2 ) @ #j)) ⇒ (k1 = k2)"
  // safety formula

rule (modulo E) revealLTK_SIG:
   [ !LTK_SIG( $A, ~ltk ) ] --[ LTKRev( $A ) ]-> [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) revealLTK_STAT:
   [ !LTK_STAT( $A, ~ltk ) ] --[ LTKRev( $A ) ]-> [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) revealLTK_PSK:
   [ !LTK_PSK( <$A, $B>, ~ltk ) ] --[ LTKRev( <$A, $B> ) ]-> [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) revealSessionKeyPSK:
   [ CommitI( tid, u, v, sk ) ] --[ SKRev( sk ) ]-> [ Out( sk ) ]

  /* has exactly the trivial AC variant */

lemma sanityExecutableToTheEnd:
  exists-trace
  "∃ tidI tidR u v m1 m2 m3 sk sk2 #i #j #k #l.
    ((((((((((((I1( tidI, u, v, m1 ) @ #i) ∧ (R2( tidR, v, m1, m2 ) @ #j)) ∧
              (#i < #j)) ∧
             (I3( tidI, u, v, m1, m2, m3 ) @ #k)) ∧
            (#j < #k)) ∧
           (CommitI( tidI, u, v, sk ) @ #k)) ∧
          (ExpCommitI( tidI, u, v, sk2 ) @ #k)) ∧
         (RunningI( tidI, u, v, sk ) @ #k)) ∧
        (ExpRunningI( tidI, u, v, sk2 ) @ #k)) ∧
       (R4( tidR, u, v, m1, m2, m3 ) @ #l)) ∧
      (#k < #l)) ∧
     (CommitR( tidR, u, v, sk ) @ #l)) ∧
    (ExpCommitR( tidR, u, v, sk2 ) @ #l)"
/*
guarded formula characterizing all satisfying traces:
"∃ tidI tidR u v m1 m2 m3 sk sk2 #i #j #k #l.
  (I1( tidI, u, v, m1 ) @ #i) ∧
  (R2( tidR, v, m1, m2 ) @ #j) ∧
  (I3( tidI, u, v, m1, m2, m3 ) @ #k) ∧
  (CommitI( tidI, u, v, sk ) @ #k) ∧
  (ExpCommitI( tidI, u, v, sk2 ) @ #k) ∧
  (RunningI( tidI, u, v, sk ) @ #k) ∧
  (ExpRunningI( tidI, u, v, sk2 ) @ #k) ∧
  (R4( tidR, u, v, m1, m2, m3 ) @ #l) ∧
  (CommitR( tidR, u, v, sk ) @ #l) ∧
  (ExpCommitR( tidR, u, v, sk2 ) @ #l)
 ∧
  (#i < #j) ∧ (#j < #k) ∧ (#k < #l)"
*/
by sorry

lemma authInjAgreeGuaranteeForI:
  all-traces
  "∀ tidI u v expSk #i.
    (ExpCommitI( tidI, u, v, expSk ) @ #i) ⇒
    (((((∃ tidR #j. (ExpRunningR( tidR, v, expSk ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ tidI2 u2 v2 #i2.
            (ExpCommitI( tidI2, u2, v2, expSk ) @ #i2) ∧ (¬(#i = #i2))))) ∨
       (∃ #j. (LTKRev( <u, v> ) @ #j) ∧ (#j < #i))) ∨
      (∃ #j. (LTKRev( u ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (LTKRev( v ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ tidI u v expSk #i.
  (ExpCommitI( tidI, u, v, expSk ) @ #i)
 ∧
  (((∀ tidR #j. (ExpRunningR( tidR, v, expSk ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∃ tidI2 u2 v2 #i2.
      (ExpCommitI( tidI2, u2, v2, expSk ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #j. (LTKRev( <u, v> ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (LTKRev( u ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (LTKRev( v ) @ #j) ⇒ ¬(#j < #i))"
*/
simplify
solve( (∀ tidR #j. (ExpRunningR( tidR, $V, expSk ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∃ tidI2 u2 v2 #i2.
         (ExpCommitI( tidI2, u2, v2, expSk ) @ #i2) ∧ ¬(#i = #i2)) )
  case case_1
  solve( StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i )
    case I1_PSK_PSK
    solve( !KU( aeadEncrypt('emptyStr',
                            hkdfExpand(<$cAEAD0, 
                                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 'K_2ae'>,
                                       hkdfExtract(~ltk, expSk)),
                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), $cAEAD0)
           ) @ #vk.2 )
      case R2_PSK_PSK
      by contradiction /* from formulas */
    next
      case c_aeadEncrypt
      solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
             ) @ #vk.5 )
        case c_h
        solve( !KU( hkdfExpand(<$cAEAD0, 
                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 'K_2ae'>,
                               hkdfExtract(~ltk, expSk))
               ) @ #vk.6 )
          case R2_PSK_PSK_case_1
          by contradiction /* from formulas */
        next
          case R2_PSK_PSK_case_2
          by contradiction /* from formulas */
        next
          case c_hkdfExpand
          solve( !KU( hkdfExtract(~ltk, expSk) ) @ #vk.22 )
            case c_hkdfExtract
            solve( !KU( ~ltk ) @ #vk.24 )
              case revealLTK_PSK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( (#i < #i2)  ∥ (#i2 < #i) )
    case case_1
    solve( StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i )
      case I1_PSK_PSK
      solve( StI1_PSK_PSK( $U.1, ~ltk.1, $V.1, ~xx.1, m1, ~tid.1 ) ▶₀ #i2 )
        case I1_PSK_PSK
        solve( !KU( aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0, 
                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                                            'K_2ae'>,
                                           hkdfExtract(~ltk, expSk)),
                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), $cAEAD0)
               ) @ #vk.2 )
          case R2_PSK_PSK
          solve( splitEqs(1) )
            case split_case_1
            by contradiction /* cyclic */
          next
            case split_case_2
            solve( !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.4 )
              case I1_PSK_PSK
              by solve( !KU( ~yy ) @ #vk.17 )
            next
              case R2_PSK_PSK
              by solve( !KU( ~xx ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~xx ) @ #vk.18 )
            qed
          qed
        next
          case c_aeadEncrypt
          solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
                 ) @ #vk.8 )
            case c_h
            solve( !KU( aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0.1, 
                                                h(<$cHash0.1, 
                                                   <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk.1, expSk)),
                                    h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>),
                                    $cAEAD0.1)
                   ) @ #vk.7 )
              case R2_PSK_PSK
              solve( splitEqs(0) )
                case split
                solve( !KU( 'g'^(~yy*~xx.1*inv(~xx)) ) @ #vk.5 )
                  case I1_PSK_PSK
                  by solve( !KU( ~yy ) @ #vk.33 )
                next
                  case R2_PSK_PSK
                  by solve( !KU( ~xx.1 ) @ #vk.33 )
                next
                  case c_exp
                  by solve( !KU( ~yy ) @ #vk.34 )
                qed
              qed
            next
              case c_aeadEncrypt
              solve( !KU( h(<$cHash0.1, 
                             <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>)
                     ) @ #vk.24 )
                case c_h
                solve( !KU( hkdfExpand(<$cAEAD0, 
                                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 'K_2ae'>,
                                       hkdfExtract(~ltk, expSk))
                       ) @ #vk.12 )
                  case R2_PSK_PSK_case_1
                  solve( splitEqs(1) )
                    case split_case_1
                    by contradiction /* cyclic */
                  next
                    case split_case_2
                    solve( !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10 )
                      case I1_PSK_PSK
                      by solve( !KU( ~yy ) @ #vk.39 )
                    next
                      case R2_PSK_PSK
                      by solve( !KU( ~xx ) @ #vk.39 )
                    next
                      case c_exp
                      by solve( !KU( ~xx ) @ #vk.40 )
                    qed
                  qed
                next
                  case R2_PSK_PSK_case_2
                  solve( splitEqs(1) )
                    case split_case_1
                    by contradiction /* cyclic */
                  next
                    case split_case_2
                    solve( !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10 )
                      case I1_PSK_PSK
                      by solve( !KU( ~yy ) @ #vk.40 )
                    next
                      case R2_PSK_PSK
                      by solve( !KU( ~xx ) @ #vk.40 )
                    next
                      case c_exp
                      by solve( !KU( ~xx ) @ #vk.41 )
                    qed
                  qed
                next
                  case c_hkdfExpand
                  solve( !KU( hkdfExtract(~ltk, expSk) ) @ #vk.40 )
                    case c_hkdfExtract
                    solve( !KU( ~ltk ) @ #vk.42 )
                      case revealLTK_PSK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( StI1_PSK_PSK( $U, ~ltk, $V, ~xx, m1, ~tid ) ▶₀ #i )
      case I1_PSK_PSK
      solve( StI1_PSK_PSK( $U.1, ~ltk.1, $V.1, ~xx.1, m1, ~tid.1 ) ▶₀ #i2 )
        case I1_PSK_PSK
        solve( !KU( aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0, 
                                            h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 
                                            'K_2ae'>,
                                           hkdfExtract(~ltk, expSk)),
                                h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), $cAEAD0)
               ) @ #vk.2 )
          case R2_PSK_PSK
          solve( splitEqs(1) )
            case split_case_1
            by contradiction /* cyclic */
          next
            case split_case_2
            solve( !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.4 )
              case I1_PSK_PSK
              by solve( !KU( ~yy ) @ #vk.17 )
            next
              case R2_PSK_PSK
              by solve( !KU( ~xx ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~xx ) @ #vk.18 )
            qed
          qed
        next
          case c_aeadEncrypt
          solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>)
                 ) @ #vk.8 )
            case c_h
            solve( !KU( aeadEncrypt('emptyStr',
                                    hkdfExpand(<$cAEAD0.1, 
                                                h(<$cHash0.1, 
                                                   <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>), 
                                                'K_2ae'>,
                                               hkdfExtract(~ltk.1, expSk)),
                                    h(<$cHash0.1, <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>),
                                    $cAEAD0.1)
                   ) @ #vk.7 )
              case R2_PSK_PSK
              solve( splitEqs(0) )
                case split
                solve( !KU( 'g'^(~yy*~xx.1*inv(~xx)) ) @ #vk.5 )
                  case I1_PSK_PSK
                  by solve( !KU( ~yy ) @ #vk.33 )
                next
                  case R2_PSK_PSK
                  by solve( !KU( ~xx.1 ) @ #vk.33 )
                next
                  case c_exp
                  by solve( !KU( ~yy ) @ #vk.34 )
                qed
              qed
            next
              case c_aeadEncrypt
              solve( !KU( h(<$cHash0.1, 
                             <'PSK', 'PSK', $cSUITE0.1, 'g'^~xx.1, $U.1, $V.1>, gy.1>)
                     ) @ #vk.24 )
                case c_h
                solve( !KU( hkdfExpand(<$cAEAD0, 
                                        h(<$cHash0, <'PSK', 'PSK', $cSUITE0, 'g'^~xx, $U, $V>, gy>), 'K_2ae'>,
                                       hkdfExtract(~ltk, expSk))
                       ) @ #vk.12 )
                  case R2_PSK_PSK_case_1
                  solve( splitEqs(1) )
                    case split_case_1
                    by contradiction /* cyclic */
                  next
                    case split_case_2
                    solve( !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10 )
                      case I1_PSK_PSK
                      by solve( !KU( ~yy ) @ #vk.39 )
                    next
                      case R2_PSK_PSK
                      by solve( !KU( ~xx ) @ #vk.39 )
                    next
                      case c_exp
                      by solve( !KU( ~xx ) @ #vk.40 )
                    qed
                  qed
                next
                  case R2_PSK_PSK_case_2
                  solve( splitEqs(1) )
                    case split_case_1
                    by contradiction /* cyclic */
                  next
                    case split_case_2
                    solve( !KU( 'g'^(~xx*~yy*inv(~xx.1)) ) @ #vk.10 )
                      case I1_PSK_PSK
                      by solve( !KU( ~yy ) @ #vk.40 )
                    next
                      case R2_PSK_PSK
                      by solve( !KU( ~xx ) @ #vk.40 )
                    next
                      case c_exp
                      by solve( !KU( ~xx ) @ #vk.41 )
                    qed
                  qed
                next
                  case c_hkdfExpand
                  solve( !KU( hkdfExtract(~ltk, expSk) ) @ #vk.40 )
                    case c_hkdfExtract
                    solve( !KU( ~ltk ) @ #vk.42 )
                      case revealLTK_PSK
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma authInjAgreeGuaranteeForR:
  all-traces
  "∀ tidR u v sk #i.
    (CommitR( tidR, u, v, sk ) @ #i) ⇒
    (((((∃ tidI #j. (RunningI( tidI, u, v, sk ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ tidR2 u2 v2 #i2.
            (CommitR( tidR2, u2, v2, sk ) @ #i2) ∧ (¬(#i = #i2))))) ∨
       (∃ #j. (LTKRev( <u, v> ) @ #j) ∧ (#j < #i))) ∨
      (∃ #j. (LTKRev( u ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (LTKRev( v ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ tidR u v sk #i.
  (CommitR( tidR, u, v, sk ) @ #i)
 ∧
  (((∀ tidI #j. (RunningI( tidI, u, v, sk ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∃ tidR2 u2 v2 #i2.
      (CommitR( tidR2, u2, v2, sk ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #j. (LTKRev( <u, v> ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (LTKRev( u ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (LTKRev( v ) @ #j) ⇒ ¬(#j < #i))"
*/
simplify
solve( (∀ tidI #j. (RunningI( tidI, $U, $V, sk ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∃ tidR2 u2 v2 #i2. (CommitR( tidR2, u2, v2, sk ) @ #i2) ∧ ¬(#i = #i2)) )
  case case_1
  solve( StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                       ~tid, m1, m2
         ) ▶₀ #i )
    case R2_PSK_PSK
    solve( !KU( aeadEncrypt('emptyStr',
                            hkdfExpand(<$cAEAD0.1, 
                                        h(<$cHash0.1, 
                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                           aeadEncrypt('emptyStr',
                                                       hkdfExpand(<$cAEAD0, 
                                                                   h(<$cHash0, 
                                                                      <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                                      'g'^~yy>), 
                                                                   'K_2ae'>,
                                                                  hkdfExtract(~ltk, sk)),
                                                       h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                          'g'^~yy>),
                                                       $cAEAD0), 
                                           'emptyStr'>), 
                                        'K_3ae'>,
                                       hkdfExtract(~ltk, sk)),
                            h(<$cHash0.1, 
                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                               aeadEncrypt('emptyStr',
                                           hkdfExpand(<$cAEAD0, 
                                                       h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                          'g'^~yy>), 
                                                       'K_2ae'>,
                                                      hkdfExtract(~ltk, sk)),
                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                           $cAEAD0), 
                               'emptyStr'>),
                            $cAEAD0.1)
           ) @ #vk.2 )
      case I3_PSK_PSK
      by contradiction /* from formulas */
    next
      case c_aeadEncrypt
      solve( !KU( h(<$cHash0.1, 
                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                     aeadEncrypt('emptyStr',
                                 hkdfExpand(<$cAEAD0, 
                                             h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                             'K_2ae'>,
                                            hkdfExtract(~ltk, sk)),
                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0), 
                     'emptyStr'>)
             ) @ #vk.14 )
        case c_h
        solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
               ) @ #vk.20 )
          case c_h
          solve( !KU( hkdfExpand(<$cAEAD0.1, 
                                  h(<$cHash0.1, 
                                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                     aeadEncrypt('emptyStr',
                                                 hkdfExpand(<$cAEAD0, 
                                                             h(<$cHash0, 
                                                                <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy
                                                               >), 
                                                             'K_2ae'>,
                                                            hkdfExtract(~ltk, sk)),
                                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                                 $cAEAD0), 
                                     'emptyStr'>), 
                                  'K_3ae'>,
                                 hkdfExtract(~ltk, sk))
                 ) @ #vk.18 )
            case I3_PSK_PSK_case_1
            by contradiction /* from formulas */
          next
            case I3_PSK_PSK_case_2
            by contradiction /* from formulas */
          next
            case c_hkdfExpand
            solve( !KU( hkdfExtract(~ltk, sk) ) @ #vk.28 )
              case c_hkdfExtract
              solve( !KU( ~ltk ) @ #vk.30 )
                case revealLTK_PSK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( (#i < #i2)  ∥ (#i2 < #i) )
    case case_1
    solve( StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                         ~tid, m1, m2
           ) ▶₀ #i )
      case R2_PSK_PSK
      solve( StR2_PSK_PSK( $U.1, $V.1, ~ltk.1, ~yy.1, prk_3e2m, TH_2,
                           CIPHERTEXT_2, sk, ~tid.1, m1, m2
             ) ▶₀ #i2 )
        case R2_PSK_PSK
        solve( !KU( aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0.1, 
                                            h(<$cHash0.1, 
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                               aeadEncrypt('emptyStr',
                                                           hkdfExpand(<$cAEAD0, 
                                                                       h(<$cHash0, 
                                                                          <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                                          >, 
                                                                          'g'^~yy>), 
                                                                       'K_2ae'>,
                                                                      hkdfExtract(~ltk, sk)),
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>),
                                                           $cAEAD0), 
                                               'emptyStr'>), 
                                            'K_3ae'>,
                                           hkdfExtract(~ltk, sk)),
                                h(<$cHash0.1, 
                                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                   aeadEncrypt('emptyStr',
                                               hkdfExpand(<$cAEAD0, 
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>), 
                                                           'K_2ae'>,
                                                          hkdfExtract(~ltk, sk)),
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                               $cAEAD0), 
                                   'emptyStr'>),
                                $cAEAD0.1)
               ) @ #vk.3 )
          case I3_PSK_PSK
          solve( splitEqs(3) )
            case split_case_1
            by contradiction /* cyclic */
          next
            case split_case_2
            solve( !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.20 )
              case I1_PSK_PSK
              by solve( !KU( ~yy ) @ #vk.28 )
            next
              case R2_PSK_PSK
              by solve( !KU( ~xx ) @ #vk.28 )
            next
              case c_exp
              by solve( !KU( ~xx ) @ #vk.29 )
            qed
          qed
        next
          case c_aeadEncrypt
          solve( !KU( h(<$cHash0.1, 
                         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                         aeadEncrypt('emptyStr',
                                     hkdfExpand(<$cAEAD0, 
                                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                                 'K_2ae'>,
                                                hkdfExtract(~ltk, sk)),
                                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0), 
                         'emptyStr'>)
                 ) @ #vk.25 )
            case c_h
            solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
                   ) @ #vk.31 )
              case c_h
              solve( !KU( aeadEncrypt('emptyStr',
                                      hkdfExpand(<$cAEAD0.3, 
                                                  h(<$cHash0.3, 
                                                     h(<$cHash0.2, 
                                                        <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                        'g'^~yy.1>), 
                                                     aeadEncrypt('emptyStr',
                                                                 hkdfExpand(<$cAEAD0.2, 
                                                                             h(<$cHash0.2, 
                                                                                <'PSK', 'PSK', $cSUITE0.1, 
                                                                                 gx.1, $U.1, $V.1>, 
                                                                                'g'^~yy.1>), 
                                                                             'K_2ae'>,
                                                                            hkdfExtract(~ltk.1, sk)),
                                                                 h(<$cHash0.2, 
                                                                    <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, 
                                                                     $V.1>, 
                                                                    'g'^~yy.1>),
                                                                 $cAEAD0.2), 
                                                     'emptyStr'>), 
                                                  'K_3ae'>,
                                                 hkdfExtract(~ltk.1, sk)),
                                      h(<$cHash0.3, 
                                         h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 'g'^~yy.1
                                           >), 
                                         aeadEncrypt('emptyStr',
                                                     hkdfExpand(<$cAEAD0.2, 
                                                                 h(<$cHash0.2, 
                                                                    <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, 
                                                                     $V.1>, 
                                                                    'g'^~yy.1>), 
                                                                 'K_2ae'>,
                                                                hkdfExtract(~ltk.1, sk)),
                                                     h(<$cHash0.2, 
                                                        <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                        'g'^~yy.1>),
                                                     $cAEAD0.2), 
                                         'emptyStr'>),
                                      $cAEAD0.3)
                     ) @ #vk.8 )
                case I3_PSK_PSK
                solve( splitEqs(2) )
                  case split
                  solve( !KU( 'g'^(~xx*~yy.1*inv(~yy)) ) @ #vk.20 )
                    case I1_PSK_PSK
                    by solve( !KU( ~yy.1 ) @ #vk.41 )
                  next
                    case R2_PSK_PSK
                    by solve( !KU( ~xx ) @ #vk.41 )
                  next
                    case c_exp
                    by solve( !KU( ~xx ) @ #vk.42 )
                  qed
                qed
              next
                case c_aeadEncrypt
                solve( !KU( h(<$cHash0.3, 
                               h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 'g'^~yy.1>), 
                               aeadEncrypt('emptyStr',
                                           hkdfExpand(<$cAEAD0.2, 
                                                       h(<$cHash0.2, 
                                                          <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                          'g'^~yy.1>), 
                                                       'K_2ae'>,
                                                      hkdfExtract(~ltk.1, sk)),
                                           h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                              'g'^~yy.1>),
                                           $cAEAD0.2), 
                               'emptyStr'>)
                       ) @ #vk.38 )
                  case c_h
                  solve( !KU( h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                 'g'^~yy.1>)
                         ) @ #vk.44 )
                    case c_h
                    solve( !KU( hkdfExpand(<$cAEAD0.1, 
                                            h(<$cHash0.1, 
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                               aeadEncrypt('emptyStr',
                                                           hkdfExpand(<$cAEAD0, 
                                                                       h(<$cHash0, 
                                                                          <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                                          >, 
                                                                          'g'^~yy>), 
                                                                       'K_2ae'>,
                                                                      hkdfExtract(~ltk, sk)),
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>),
                                                           $cAEAD0), 
                                               'emptyStr'>), 
                                            'K_3ae'>,
                                           hkdfExtract(~ltk, sk))
                           ) @ #vk.36 )
                      case I3_PSK_PSK_case_1
                      solve( splitEqs(3) )
                        case split_case_1
                        by contradiction /* cyclic */
                      next
                        case split_case_2
                        solve( !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35 )
                          case I1_PSK_PSK
                          by solve( !KU( ~yy ) @ #vk.51 )
                        next
                          case R2_PSK_PSK
                          by solve( !KU( ~xx ) @ #vk.51 )
                        next
                          case c_exp
                          by solve( !KU( ~xx ) @ #vk.52 )
                        qed
                      qed
                    next
                      case I3_PSK_PSK_case_2
                      solve( splitEqs(3) )
                        case split_case_1
                        by contradiction /* cyclic */
                      next
                        case split_case_2
                        solve( !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35 )
                          case I1_PSK_PSK
                          by solve( !KU( ~yy ) @ #vk.52 )
                        next
                          case R2_PSK_PSK
                          by solve( !KU( ~xx ) @ #vk.52 )
                        next
                          case c_exp
                          by solve( !KU( ~xx ) @ #vk.53 )
                        qed
                      qed
                    next
                      case c_hkdfExpand
                      solve( !KU( hkdfExtract(~ltk, sk) ) @ #vk.52 )
                        case c_hkdfExtract
                        solve( !KU( ~ltk ) @ #vk.54 )
                          case revealLTK_PSK
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( StR2_PSK_PSK( $U, $V, ~ltk, ~yy, prk_3e2m, TH_2, CIPHERTEXT_2, sk,
                         ~tid, m1, m2
           ) ▶₀ #i )
      case R2_PSK_PSK
      solve( StR2_PSK_PSK( $U.1, $V.1, ~ltk.1, ~yy.1, prk_3e2m, TH_2,
                           CIPHERTEXT_2, sk, ~tid.1, m1, m2
             ) ▶₀ #i2 )
        case R2_PSK_PSK
        solve( !KU( aeadEncrypt('emptyStr',
                                hkdfExpand(<$cAEAD0.1, 
                                            h(<$cHash0.1, 
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                               aeadEncrypt('emptyStr',
                                                           hkdfExpand(<$cAEAD0, 
                                                                       h(<$cHash0, 
                                                                          <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                                          >, 
                                                                          'g'^~yy>), 
                                                                       'K_2ae'>,
                                                                      hkdfExtract(~ltk, sk)),
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>),
                                                           $cAEAD0), 
                                               'emptyStr'>), 
                                            'K_3ae'>,
                                           hkdfExtract(~ltk, sk)),
                                h(<$cHash0.1, 
                                   h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                   aeadEncrypt('emptyStr',
                                               hkdfExpand(<$cAEAD0, 
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>), 
                                                           'K_2ae'>,
                                                          hkdfExtract(~ltk, sk)),
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>),
                                               $cAEAD0), 
                                   'emptyStr'>),
                                $cAEAD0.1)
               ) @ #vk.3 )
          case I3_PSK_PSK
          solve( splitEqs(3) )
            case split_case_1
            by contradiction /* cyclic */
          next
            case split_case_2
            solve( !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.20 )
              case I1_PSK_PSK
              by solve( !KU( ~yy ) @ #vk.28 )
            next
              case R2_PSK_PSK
              by solve( !KU( ~xx ) @ #vk.28 )
            next
              case c_exp
              by solve( !KU( ~xx ) @ #vk.29 )
            qed
          qed
        next
          case c_aeadEncrypt
          solve( !KU( h(<$cHash0.1, 
                         h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                         aeadEncrypt('emptyStr',
                                     hkdfExpand(<$cAEAD0, 
                                                 h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                                 'K_2ae'>,
                                                hkdfExtract(~ltk, sk)),
                                     h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), $cAEAD0), 
                         'emptyStr'>)
                 ) @ #vk.25 )
            case c_h
            solve( !KU( h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>)
                   ) @ #vk.31 )
              case c_h
              solve( !KU( aeadEncrypt('emptyStr',
                                      hkdfExpand(<$cAEAD0.3, 
                                                  h(<$cHash0.3, 
                                                     h(<$cHash0.2, 
                                                        <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                        'g'^~yy.1>), 
                                                     aeadEncrypt('emptyStr',
                                                                 hkdfExpand(<$cAEAD0.2, 
                                                                             h(<$cHash0.2, 
                                                                                <'PSK', 'PSK', $cSUITE0.1, 
                                                                                 gx.1, $U.1, $V.1>, 
                                                                                'g'^~yy.1>), 
                                                                             'K_2ae'>,
                                                                            hkdfExtract(~ltk.1, sk)),
                                                                 h(<$cHash0.2, 
                                                                    <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, 
                                                                     $V.1>, 
                                                                    'g'^~yy.1>),
                                                                 $cAEAD0.2), 
                                                     'emptyStr'>), 
                                                  'K_3ae'>,
                                                 hkdfExtract(~ltk.1, sk)),
                                      h(<$cHash0.3, 
                                         h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 'g'^~yy.1
                                           >), 
                                         aeadEncrypt('emptyStr',
                                                     hkdfExpand(<$cAEAD0.2, 
                                                                 h(<$cHash0.2, 
                                                                    <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, 
                                                                     $V.1>, 
                                                                    'g'^~yy.1>), 
                                                                 'K_2ae'>,
                                                                hkdfExtract(~ltk.1, sk)),
                                                     h(<$cHash0.2, 
                                                        <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                        'g'^~yy.1>),
                                                     $cAEAD0.2), 
                                         'emptyStr'>),
                                      $cAEAD0.3)
                     ) @ #vk.8 )
                case I3_PSK_PSK
                solve( splitEqs(2) )
                  case split
                  solve( !KU( 'g'^(~xx*~yy.1*inv(~yy)) ) @ #vk.20 )
                    case I1_PSK_PSK
                    by solve( !KU( ~yy.1 ) @ #vk.41 )
                  next
                    case R2_PSK_PSK
                    by solve( !KU( ~xx ) @ #vk.41 )
                  next
                    case c_exp
                    by solve( !KU( ~xx ) @ #vk.42 )
                  qed
                qed
              next
                case c_aeadEncrypt
                solve( !KU( h(<$cHash0.3, 
                               h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 'g'^~yy.1>), 
                               aeadEncrypt('emptyStr',
                                           hkdfExpand(<$cAEAD0.2, 
                                                       h(<$cHash0.2, 
                                                          <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                                          'g'^~yy.1>), 
                                                       'K_2ae'>,
                                                      hkdfExtract(~ltk.1, sk)),
                                           h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                              'g'^~yy.1>),
                                           $cAEAD0.2), 
                               'emptyStr'>)
                       ) @ #vk.38 )
                  case c_h
                  solve( !KU( h(<$cHash0.2, <'PSK', 'PSK', $cSUITE0.1, gx.1, $U.1, $V.1>, 
                                 'g'^~yy.1>)
                         ) @ #vk.44 )
                    case c_h
                    solve( !KU( hkdfExpand(<$cAEAD0.1, 
                                            h(<$cHash0.1, 
                                               h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 'g'^~yy>), 
                                               aeadEncrypt('emptyStr',
                                                           hkdfExpand(<$cAEAD0, 
                                                                       h(<$cHash0, 
                                                                          <'PSK', 'PSK', $cSUITE0, gx, $U, $V
                                                                          >, 
                                                                          'g'^~yy>), 
                                                                       'K_2ae'>,
                                                                      hkdfExtract(~ltk, sk)),
                                                           h(<$cHash0, <'PSK', 'PSK', $cSUITE0, gx, $U, $V>, 
                                                              'g'^~yy>),
                                                           $cAEAD0), 
                                               'emptyStr'>), 
                                            'K_3ae'>,
                                           hkdfExtract(~ltk, sk))
                           ) @ #vk.36 )
                      case I3_PSK_PSK_case_1
                      solve( splitEqs(3) )
                        case split_case_1
                        by contradiction /* cyclic */
                      next
                        case split_case_2
                        solve( !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35 )
                          case I1_PSK_PSK
                          by solve( !KU( ~yy ) @ #vk.51 )
                        next
                          case R2_PSK_PSK
                          by solve( !KU( ~xx ) @ #vk.51 )
                        next
                          case c_exp
                          by solve( !KU( ~xx ) @ #vk.52 )
                        qed
                      qed
                    next
                      case I3_PSK_PSK_case_2
                      solve( splitEqs(3) )
                        case split_case_1
                        by contradiction /* cyclic */
                      next
                        case split_case_2
                        solve( !KU( 'g'^(~xx*~yy*inv(~yy.1)) ) @ #vk.35 )
                          case I1_PSK_PSK
                          by solve( !KU( ~yy ) @ #vk.52 )
                        next
                          case R2_PSK_PSK
                          by solve( !KU( ~xx ) @ #vk.52 )
                        next
                          case c_exp
                          by solve( !KU( ~xx ) @ #vk.53 )
                        qed
                      qed
                    next
                      case c_hkdfExpand
                      solve( !KU( hkdfExtract(~ltk, sk) ) @ #vk.52 )
                        case c_hkdfExtract
                        solve( !KU( ~ltk ) @ #vk.54 )
                          case revealLTK_PSK
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma authGIYImplicitAuthGuaranteeForI:
  all-traces
  "∀ tidI u v impSk #i.
    (CommitI( tidI, u, v, impSk ) @ #i) ⇒
    ((((((∀ tidR u2 v2 #j.
           (CommitR( tidR, u2, v2, impSk ) @ #j) ⇒ ((u = u2) ∧ (v = v2))) ∧
         (¬(∃ #k. K( impSk ) @ #k))) ∧
        (¬(∃ tidR u.1 v.1 #j tidR2 u2 v2 #j2.
            ((CommitR( tidR, u.1, v.1, impSk ) @ #j) ∧
             (CommitR( tidR2, u2, v2, impSk ) @ #j2)) ∧
            (¬(#j = #j2))))) ∨
       (∃ #k. LTKRev( u ) @ #k)) ∨
      (∃ #k. LTKRev( v ) @ #k)) ∨
     (∃ #k. LTKRev( <u, v> ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ tidI u v impSk #i.
  (CommitI( tidI, u, v, impSk ) @ #i)
 ∧
  (((∃ tidR u2 v2 #j.
      (CommitR( tidR, u2, v2, impSk ) @ #j) ∧ ((¬(u = u2)) ∨ (¬(v = v2)))) ∨
    (∃ #k. (K( impSk ) @ #k)) ∨
    (∃ tidR u.1 v.1 #j tidR2 u2 v2 #j2.
      (CommitR( tidR, u.1, v.1, impSk ) @ #j) ∧
      (CommitR( tidR2, u2, v2, impSk ) @ #j2)
     ∧
      ¬(#j = #j2)))) ∧
  (∀ #k. (LTKRev( u ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (LTKRev( v ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (LTKRev( <u, v> ) @ #k) ⇒ ⊥)"
*/
by sorry

lemma authGIYImplicitAuthGuaranteeForI2:
  all-traces
  "∀ tidI u v impSk #i.
    (CommitI( tidI, u, v, impSk ) @ #i) ⇒
    ((((∀ tidR u2 v2 #j.
         (CommitR( tidR, u2, v2, impSk ) @ #j) ⇒
         ((((u = u2) ∧ (v = v2)) ∧
           (∀ tidR2 u3 v3 #j2.
             (CommitR( tidR2, u3, v3, impSk ) @ #j2) ⇒ (#j = #j2))) ∧
          (¬(∃ #k. K( impSk ) @ #k)))) ∨
       (∃ #k. LTKRev( u ) @ #k)) ∨
      (∃ #k. LTKRev( v ) @ #k)) ∨
     (∃ #k. LTKRev( <u, v> ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ tidI u v impSk #i.
  (CommitI( tidI, u, v, impSk ) @ #i)
 ∧
  (∃ tidR u2 v2 #j.
    (CommitR( tidR, u2, v2, impSk ) @ #j)
   ∧
    ((¬(u = u2)) ∨
     (¬(v = v2)) ∨
     (∃ tidR2 u3 v3 #j2.
       (CommitR( tidR2, u3, v3, impSk ) @ #j2) ∧ ¬(#j = #j2)) ∨
     (∃ #k. (K( impSk ) @ #k)))) ∧
  (∀ #k. (LTKRev( u ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (LTKRev( v ) @ #k) ⇒ ⊥) ∧
  (∀ #k. (LTKRev( <u, v> ) @ #k) ⇒ ⊥)"
*/
by sorry

lemma secrecyPFSGIYSessionKey:
  all-traces
  "(∀ tid u v sk #i #j.
     ((K( sk ) @ #i) ∧ (CommitI( tid, u, v, sk ) @ #j)) ⇒
     ((∃ #l. (LTKRev( <u, v> ) @ #l) ∧ (#l < #j)) ∨
      (∃ #l. SKRev( sk ) @ #l))) ∧
   (∀ tid u v sk #i #j.
     ((K( sk ) @ #i) ∧ (CommitR( tid, u, v, sk ) @ #j)) ⇒
     ((∃ #l. (LTKRev( <u, v> ) @ #l) ∧ (#l < #j)) ∨
      (∃ #l. SKRev( sk ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"((∃ tid u v sk #i #j.
    (K( sk ) @ #i) ∧ (CommitI( tid, u, v, sk ) @ #j)
   ∧
    (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧
    (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥)) ∨
  (∃ tid u v sk #i #j.
    (K( sk ) @ #i) ∧ (CommitR( tid, u, v, sk ) @ #j)
   ∧
    (∀ #l. (LTKRev( <u, v> ) @ #l) ⇒ ¬(#l < #j)) ∧
    (∀ #l. (SKRev( sk ) @ #l) ⇒ ⊥)))"
*/
by sorry

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: TMP_edhoc_PSK_PSK.spthy

  sanityExecutableToTheEnd (exists-trace): analysis incomplete (1 steps)
  authInjAgreeGuaranteeForI (all-traces): verified (79 steps)
  authInjAgreeGuaranteeForR (all-traces): verified (84 steps)
  authGIYImplicitAuthGuaranteeForI (all-traces): analysis incomplete (1 steps)
  authGIYImplicitAuthGuaranteeForI2 (all-traces): analysis incomplete (1 steps)
  secrecyPFSGIYSessionKey (all-traces): analysis incomplete (1 steps)

==============================================================================

real	0m13,081s
user	0m33,155s
sys	0m6,095s
