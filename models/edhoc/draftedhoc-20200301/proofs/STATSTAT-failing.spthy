lemma helpInvLtkKDF [reuse]:
  all-traces
  "∀ s1 s2 k #i.
         (!KU( hkdfExpand(s1, hkdfExtract(s2, k)) ) @ #i) ⇒
         (∃ #j. (!KU( k ) @ #j) ∧ (#j < #i))"
simplify
solve( !KU( hkdfExpand(s1, hkdfExtract(s2, k)) ) @ #i )
  case R2_STAT_STAT_case_1
  solve( !KU( hkdfExpand(<$cAEAD0,
                          h(<$cHash0, <$STAT, $STAT, $cSUITE0, gx, ~C_I, ~AD_1>,
                             ~C_I, 'g'^~yy, ~C_R>),
                          'K_2e'>,
                         hkdfExtract($cEmptyStr, z))
         ) @ #vk.15 )
    case c_hkdfExpand
    solve( !KU( hkdfExtract($cEmptyStr, z) ) @ #vk.29 )
      case c_hkdfExtract
      solve( !KU( ~C_I ) @ #vk.17 )
        case I1_STAT_STAT_case_1
        solve( !KU( ~AD_1 ) @ #vk.19 )
          case I1_STAT_STAT_case_1
          solve( !KU( ~AD_2 ) @ #vk.25 )
            case R2_STAT_STAT
            solve( !KU( ~C_R ) @ #vk.29 )
              case R2_STAT_STAT
              solve( !KU( 'g'^~ltk ) @ #vk.26 )
                case c_exp
                solve( !KU( ~ltk ) @ #vk.33 )
                  case revealLTK_STAT
                  solve( !KU( 'g'^~yy ) @ #vk.30 )
                    case R2_STAT_STAT
                    solve( splitEqs(0) )
                      case split_case_04
                      solve( !KU( x^(~yy*x.1) ) @ #vk.32 )
                        case R2_STAT_STAT_case_2
                        solve( !KU( 'g'^x ) @ #vk.27 )
                          case c_exp
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma helpInvKeyDep [reuse]:
  all-traces
  "∀ tid u v sk ad1 ci prk2 prk3 #i #j #t0.
         (((CommitI( tid, u, v, sk ) @ #t0) ∧
           (I3( tid, ad1, ci, prk2, prk3 ) @ #i)) ∧
          (!KU( sk ) @ #j)) ⇒
         (∃ #k. !KU( prk3 ) @ #k)"
simplify
solve( StI1_STAT_STAT( $U, ~ltk, $V, ~xx, ~C_I, m1, ~AD_1, ~tid
       ) ▶₀ #i )
  case I1_STAT_STAT
  solve( StI1_STAT_STAT( $U.1, ~ltk.1, $V.1, ~xx.1, ~C_I.1, m1,
                         ~AD_1.1, ~tid
         ) ▶₀ #t0 )
    case I1_STAT_STAT
    solve( !KU( xorEncrypt(hkdfExpand(<$cAEAD0,
                                       h(<$cHash0,
                                          <$STAT, $STAT, $cSUITE0, 'g'^~xx,
~C_I, ~AD_1
                                          >,
                                          ~C_I, gy, ~C_R>),
                                       'K_2e'>,
                                      hkdfExtract($cEmptyStr, z)),
                           <$V, authR, ~AD_2>)
           ) @ #vk.6 )
      case c_xorEncrypt
      solve( !KU( hkdfExpand(<$cAEAD0,
                              h(<$cHash0,
                                 <$STAT, $STAT, $cSUITE0, 'g'^~xx, ~C_I, ~AD_1>,
                                 ~C_I, gy, ~C_R>),
                              'K_2e'>,
                             hkdfExtract($cEmptyStr, z))
             ) @ #vk.8 )
        case c_hkdfExpand
        solve( !KU( hkdfExtract($cEmptyStr, z) ) @ #vk.16 )
          case c_hkdfExtract
          solve( !KU( h(<$cHash0,
                         <$STAT, $STAT, $cSUITE0, 'g'^~xx, ~C_I, ~AD_1>,
                         ~C_I, gy, ~C_R>)
                 ) @ #vk.19 )
            case c_h
            solve( !PK_STAT( $V, pkV ) ▶₁ #i )
              case registerLTK_STAT
              solve( !PK_STAT( $U, pkU ) ▶₂ #i )
                case registerLTK_STAT
                solve( !KU( ~C_I ) @ #vk.10 )
                  case I1_STAT_STAT
                  solve( !KU( ~C_R ) @ #vk.17 )
                    case I1_STAT_STAT_case_1
                    solve( !KU( ~AD_2 ) @ #vk.25 )
                      case I1_STAT_STAT_case_1
                      solve( !KU( ~AD_1 ) @ #vk.33 )
                        case I1_STAT_STAT
                        solve( !KU( 'g'^(~xx*~ltk.1) ) @ #vk.23 )
                          case I1_STAT_STAT
                          solve( !KU( ~ltk.1 ) @ #vk.34 )
                            case revealLTK_STAT
                            solve( !KU( 'g'^~xx ) @ #vk.26 )
                              case I1_STAT_STAT
                              solve( splitEqs(0) )
                                case split_case_01
                                solve( !KU( gy^~xx ) @ #vk.26 )
                                  case I1_STAT_STAT
                                  SOLVED // trace found
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

end
