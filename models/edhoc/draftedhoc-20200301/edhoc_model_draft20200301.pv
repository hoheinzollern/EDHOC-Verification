(* Basic assumptions and limitations:
 * - We model all cipher suites as a single fixed algorithms; no negotiation
 *   - Initiator sends a cipher suite proposal and Responder always accepts it
 * - We always send context identifiers C_I and C_R
 *   - C_I and C_R are chosen by EDHOC it says in 4.2.2 and 4.3.1.
 *     So, EDHOC has some control over how they are selected.
 * - We don't model the CORR parameter
 * - We send aux data in all messages where it can occur (AD1, AD2, AD3)
 *
 * WoW: put in a DIFF tag an explain what is different or assumed compared
 *      to the specification in the place where it happens. If it affect
 *      multiple places, put it in the first palce it happens.
 *
 * TODO: CORR investigate whether it is OK to exclude it. It seems to be OK
 *       after initial back-of-the-envelope analysis.
 *
 * WoW: put a FEEDBACK tag on comments that wants to send info back to the
 *      spec writers about unclarities or inconsitencies etc. Also good to
 *      write in paper to show impact on standard.
 *
 * WoW: When making fixes to the protocol (i.e., improving the spec), then
 *      add a macro-flag and an if statement implementing the fix only
 *      when the flag is true.
 *
 * FEEDBACK: 4.1: first four bullets state that the initiator shold be able to
 *           retrieve "the" key of the responder. Singular.  Later in the
 *           section it is stated that the responder may have to try several
 *           keys. This seems inconsitent and should at least be discussed to
 *           see what the security implications are (perhaps just add a
 *           pointer to the security considerations section).
 *
 * FEEDBACK: EDHOC protocol does not check whether combination of CI/CR is unique
 *           as requested by reqs doc it seems.
 *
 * FEEDBACK: EDHOC accepts a set of acceptable IDs to connect to, but protocol
 *           does not enforce this and happily connects to whomever has a valid
 *           cert/raw public key/PSK. The version we verify does check this,
 *           but does so because we gave prior verbal feedback to the spec
 *           authors about the problem.
 *
 * NOTE: capital and lowercase with underscore comes from the spec,
 *       camelCase are additions from the model
 *
 * PROPERTIES:
 * - data/key material to protect:
 *   - the final session key (PRK_4x3m, TH_4),  (inj-greement, Confidentiality)
 *   - the application data AD_1, AD_2, AD_3  (Confident/Integrity for AD_3 (and AD_2?), integrity for AD_1)
 *   - C_I and C_R  (inj-agreement)
 *   - S_I and S_R  (inj-agreement)  (take these last)
 *   - U and V      (Confidentiality, privacy(?))
 *)

set reconstructTrace = true.
set attacker = active.

(* Macro definitions *)
letfun revealSessKey() = true. (* Currently has no effect *)
letfun revealSessState() = true. (* Currently has no effect *)
letfun maliciousPrincipals() = true.
letfun asymmToSymm() = false.
letfun IandRSupportSameCiphersuite() = true.


(* Privacy *)
(*
query x:key; attacker (idI(pk(new skU))) phase 0 ==>
  (event (LTK_Reveal(new skU)) || event (SessK3A_Reveal(x, new skU))).
query x:key; attacker (idR(pk(new skU))) phase 0 ==>
  (event (LTK_Reveal(new skU)) || event (SessK2A_Reveal(x, new skU))).

query x:key; attacker (idI(pk(new skU))) phase 1 ==>
  (event (LTK_Reveal(new skU)) || event (SessK3A_Reveal(x, new skU))).
query x:key; attacker (idR(pk(new skU))) phase 1 ==>
  (event (LTK_Reveal(new skU)) || event (SessK2A_Reveal(x, new skU))).
*)

(* Secrecy Asymmetric *)
(*
query skU:key, skV:key, S_V:bitstring, K_2:key;
  attacker (APP_2A(pk(skU),skV,S_V,K_2)) phase 0 ==>
   (event (LTK_Reveal(skU)) || event (SessK2A_Reveal(K_2, new skU))).
query skU:key, skV:key, S_V:bitstring, K_2:key;
  attacker (APP_2A'(pk(skU),skV,S_V,K_2)) phase 0 ==>
   (event (LTK_Reveal(skU)) || event (SessK2A_Reveal(K_2, new skU))).
query skU:key, skV:key, S_U:bitstring, K_3:key;
  attacker (APP_3A(skU,pk(skV),S_U,K_3)) phase 0 ==>
   (event (LTK_Reveal(skV)) || event (SessK3A_Reveal(K_3, new skU))).
*)

(* Secrecy Symmetric *)
(*
query PSK:key, S_U:bitstring, K_2 : key;
  attacker (APP_2S(PSK, S_U, K_2)) phase 0 ==>
    (event (PSK_Reveal(PSK)) || event (SessK2S_Reveal(K_2))).
query PSK:key, S_U:bitstring, K_2 : key;
  attacker (APP_2S'(PSK, S_U, K_2)) phase 0 ==>
    (event (PSK_Reveal(PSK)) || event (SessK2S_Reveal(K_2))).
query PSK:key, S_V:bitstring, K_3 : key;
  attacker (APP_3S(PSK, S_V, K_3)) phase 0 ==>
    (event (PSK_Reveal(PSK)) || event (SessK3S_Reveal(K_3))).
*)

(* Perfect Forward Secrecy Asymmetric *)
(*
query skU:key, skV:key, S_V:bitstring, K_2:key;
  attacker (APP_2A(pk(skU),skV,S_V,K_2)) phase 1 ==>
    (event (LTK_Reveal(skU)) || event (SessK2A_Reveal(K_2, new skU))).
query skU:key, skV:key, S_V:bitstring, K_2:key;
  attacker (APP_2A'(pk(skU),skV,S_V,K_2)) phase 1 ==>
    (event (LTK_Reveal(skU)) || event (SessK2A_Reveal(K_2, new skU))).
query skU:key, skV:key, S_U:bitstring, K_3:key;
  attacker (APP_3A(skU,pk(skV),S_U,K_3)) phase 1 ==>
    (event (LTK_Reveal(skV)) || event (SessK3A_Reveal(K_3, new skU))).
*)

(* Perfect Forward Secrecy Symmetric *)
(*
query PSK:key, S_U:bitstring, K_2 : key;
  attacker (APP_2S(PSK, S_U, K_2)) phase 1 ==>
    (event (PSK_Reveal(PSK)) || event (SessK2S_Reveal(K_2))).
query PSK:key, S_U:bitstring, K_2 : key;
  attacker (APP_2S'(PSK, S_U, K_2)) phase 1 ==>
    (event (PSK_Reveal(PSK)) || event (SessK2S_Reveal(K_2))).
query PSK:key, S_V:bitstring, K_3 : key;
  attacker (APP_3S(PSK, S_V, K_3)) phase 1 ==>
    (event (PSK_Reveal(PSK)) || event (SessK3S_Reveal(K_3))).
*)

(* Injective agreement Asymmetric *)
(*
query U: host, U': host, V: host, E_V: dhElt, skV : key;
  inj-event (midInitiatorA(U, V, E_V)) ==>
    (inj-event (startResponderA(U', V, E_V, skV)) || event (LTK_Reveal(skV))).
query U: host, V: host, E_U: dhElt, skU : key;
  inj-event (endResponderA(U, V, E_U)) ==>
    (inj-event (startInitiatorA(U, V, E_U, skU)) || event (LTK_Reveal(skU))).
query U: host, U': host, V: host, E_V: dhElt, skV : key;
  inj-event (endInitiatorA(U, V, E_V)) ==>
    inj-event (startResponderA(U', V, E_V, skV)) || event (LTK_Reveal(skV)).
*)

(* Injective agreement Symmetric *)
(*
query U: host, U': host, V: host, PSK: key, E_V: dhElt;
  inj-event (midInitiatorS(U, V, PSK, E_V)) ==>
    inj-event (startResponderS(U', V, PSK, E_V)) || event (PSK_Reveal(PSK)).
query U: host, U': host, V: host, PSK: key, E_V: dhElt;
  inj-event (endInitiatorS(U, V, PSK, E_V)) ==>
    inj-event (startResponderS(U', V, PSK, E_V)) || event (PSK_Reveal(PSK)).
query U: host, V: host, PSK: key, E_U: dhElt;
  inj-event (endResponderS(U, V, PSK, E_U)) ==>
    inj-event (startInitiatorS(U, V, PSK, E_U)) || event (PSK_Reveal(PSK)).
*)

(* CONTENT (algorithm) agreement Asymmetric *)
(*
query U: host, V: host, K_2: key, skV : key, aad_2 : bitstring;
  event (agreeHashEnd2A(U, V, K_2, aad_2)) ==>
    (event (agreeHashStart2A(U, V, K_2, aad_2, skV)) || event (LTK_Reveal(skV)) || event (SessK2A_Reveal(K_2, new skU))).
query U: host, V: host, K_3: key, skU : key, aad_3 : bitstring;
  event (agreeHashEnd3A(U, V, K_3, aad_3)) ==>
    (event (agreeHashStart3A(U, V, K_3, aad_3, skU)) || event (LTK_Reveal(skU)) || event (SessK3A_Reveal(K_3, new skU))).
*)

(* CONTENT (algorithm) agreement Symmetric *)
(*
query U: host, V: host, K_2: key, PSK : key, aad_2 : bitstring;
  event (agreeHashEnd2S(U, V, K_2, aad_2)) ==>
    (event (agreeHashStart2S(U, V, K_2, aad_2, PSK)) || event (PSK_Reveal(PSK)) || event (SessK2S_Reveal(K_2))).
query U: host, V: host, K_3: key, PSK : key, aad_3 : bitstring;
  event (agreeHashEnd3S(U, V, K_3, aad_3)) ==> (event
    (agreeHashStart3S(U, V, K_3, aad_3, PSK)) || event (PSK_Reveal(PSK)) || event (SessK3S_Reveal(K_3))).
*)




(* Session key secrecy and session key independence.
 * Idea: Only way for attacker to get hold of session k key
 *       is if he has access to the LTK.
 *       Expressing this as a correspondence property we write:
 *          if attacker knows the session key it must be because he knew
 *             the LTK.
 *       We don't accept that he got it any other way.
 *       Specifically, even if he knows other session keys but not the LTK,
 *       he should still not get the session key, i.e., sesssion key independence.
 *
 * KARL: Question: now we the attacker is only allowed to count attacks as wins
 *                 when one of the parites has accepted the run.
 *                 That is the only way I know how to be able to define
 *                 "the" session key. OTOH, one could consider also the original
 *                 key (Li and Sch√§ge). If you have no concerns, I OK with
 *                 the current notion of "the" key. Otherwise I need suggestions
 *                 on how to enode the session key query.
 *)
(*
 * ASYM case
 *)
event evRunningI(host, host, dhElt, dhElt, dhElt, method, method).
event evCommitI(host, host, dhElt, dhElt, dhElt, method, method).
event evRunningR(host, dhElt, dhElt, dhElt, method, method).
event evCommitR(host, host, dhElt, dhElt, dhElt, method, method).

event evLTKRevealAsym(host).
event evLTKRevealSym(host).
event reach.
event evKG_XYIReachAsym.
event evKG_XYIReachSym.
event evKG_XYIAsym(host, host, dhElt).
event evKG_XYISym(host, host, dhElt).
event evKG_XYRReachAsym.
event evKG_XYRReachSym.
event evKG_XYRAsym(host, host, dhElt).
event evKG_XYRSym(host, host, dhElt).

(*
 KARL: Proven that they are not reachable in the current form, but need
       to see how their secrecy relates to key and entity authenticatinon.
event evKG_IYIReachAsym.
event evKG_IYIReachSym.
event evKG_IYI(host, host, dhElt, dhElt).
event evKG_IYRReachAsym.
event evKG_IYRReachSym.
event evKG_IYR(host, host, dhElt, dhElt).
event evKG_RXIReachAsym.
event evKG_RXIReachSym.
event evKG_RXI(host, host, dhElt, dhElt).
event evKG_RXRReachAsym.
event evKG_RXRReachSym.
event evKG_RXR(host, host, dhElt, dhElt).
*)

(* Session ID is (U, V, G_XY)  *)
query event(evKG_XYIReachAsym).
query U: host, V: host, G_XY: dhElt;
        event(evKG_XYIAsym(U, V, G_XY)) ==>
             (event(evLTKRevealAsym(U)) || event(evLTKRevealAsym(V))).

(* KARL: This redoes some of the work of the previous query.
 *       I'd like to have an or of the two premises in a single query,
 *       but that is not allowed by Proverif's grammar. Any good ideas
 *       for work arounds?
 *)
query event(evKG_XYRReachAsym).
query U: host, V: host, G_XY: dhElt;
        event(evKG_XYRAsym(U, V, G_XY)) ==>
             (event(evLTKRevealAsym(U)) || event(evLTKRevealAsym(V))).

(*
query event(evKG_IYIReachAsym).
query U: host, V: host, G_XY: dhElt, G_IY: dhElt;
        event(evKG_IYIAsym(U, V, G_XY, G_IY)) ==>
             (event(evLTKRevealAsym(U)) || event(evLTKRevealAsym(V))).

query event(evKG_RXIReachAsym).
query U: host, V: host, G_XY: dhElt, G_RX: dhElt;
        event(evKG_RXIAsym(U, V, G_XY, G_RX)) ==>
             (event(evLTKRevealAsym(U)) || event(evLTKRevealAsym(V))).
*)

(*
 * SYM case
 *
 * KARL: Even here it seems we can't get agreement on the actual session key
 *       i.e., (K_3ae, TH_4) even for the symmetric case. Have to go for G_XY.
 *)
event evRunningISym(host, host, bitstring, dhElt, ctxID, ctxID, bitstring).
event evRunningRSym(host, host, bitstring, dhElt, ctxID, ctxID, bitstring).
event evCommitISym(host, host, bitstring, dhElt, ctxID, ctxID, bitstring).
event evCommitRSym(host, host, bitstring, dhElt, ctxID, ctxID, bitstring).

query event(evKG_XYRReachSym).
query U: host, V: host, G_XY: dhElt;
        event(evKG_XYRSym(U, V, G_XY)) ==>
             (event(evLTKRevealSym(U)) || event(evLTKRevealSym(V))).

query event(evKG_XYIReachSym).
query U: host, V: host, G_XY: dhElt;
        event(evKG_XYISym(U, V, G_XY)) ==>
             (event(evLTKRevealSym(U)) || event(evLTKRevealSym(V))).

(*
 * Agreement for all cases except when Initator uses STATic DH key
 * ASYM case
 *)
(*
query U: host, V: host, gxy: dhElt, giy: dhElt, grx: dhElt, mI: method, mR: method;
      inj-event(evCommitI(U, V, gxy, giy, grx, METHOD_SIG, mR)) ==>
         inj-event(evRunningR(V, gxy, giy, grx, mI, mR)).
query U: host, V: host, gxy: dhElt, giy: dhElt, grx: dhElt, mI: method, mR: method;
      inj-event(evCommitR(U, V, gxy, giy, grx, METHOD_SIG, mR)) ==>
         inj-event(evRunningI(U, V, gxy, giy, grx, mI, mR)).
*)

(*
 * Special (weaker) case: Initator uses static DH key
 *)
(* Implicit authentication for Initiator when using STATic DH key
 * KARL: Def in Delpech de Saint Guilheim et. al. says:
 *   forall l. accept(l) ==> forall l'. sameKey(l, l') ==> l'.pid = l.id
 *   I here use an equivalent form which better fits with the queries.
 *
 * KARL: Question: I suppose this means that we will also only be able
 *                 to show implicit agreement on the other params, e.g., C_I
 *                 and roles etc.
 *)

(*
query U: host, V: host, gxy: dhElt, giy: dhElt, grx: dhElt,
      U': host, V': host, mI: method, mR: method;
         inj-event(evCommitI(U, V, gxy, giy, grx, METHOD_STAT, mR))
      && inj-event(evCommitR(U', V', gxy, giy, grx, mI, mR))
      ==> U' = U.
*)

(* Note that the responder can still get full agreement, and this is because
 * he also gets key confirmation in becasue of the MAC in the AEAD in message 3.
 *)
(*
query U: host, V: host, gxy: dhElt, giy: dhElt, grx: dhElt,
       mR: method, mI: method;
      inj-event(evCommitR(U, V, gxy, giy, grx, METHOD_STAT, mR)) ==>
         inj-event(evRunningI(U, V, gxy, giy, grx, mI, mR)).
*)

(*
 * SYM case
 *)
(*
query U: host, V: host, ID_PSK: bitstring, G_XY: dhElt, C_I: ctxID, C_R: ctxID,
      S_I: bitstring;
    inj-event(evCommitISym(U, V, ID_PSK, G_XY, C_I, C_R, S_I)) ==>
        inj-event(evRunningRSym(U, V, ID_PSK, G_XY, C_I, C_R, S_I)).
query U: host, V: host, ID_PSK: bitstring, G_XY: dhElt, C_I: ctxID, C_R: ctxID,
      S_I: bitstring;
    inj-event(evCommitRSym(U, V, ID_PSK, G_XY, C_I, C_R, S_I)) ==>
        inj-event(evRunningISym(U, V, ID_PSK, G_XY, C_I, C_R, S_I)).
*)

(* Sanity *)
event evCompletedISym().
event evCompletedRSym().
event evInitiatorCompleted(method, method).
event evResponderCompleted(method, method).
(*
query event(evCompletedISym()).
query event(evCompletedRSym()).
query event(evInitiatorCompleted(METHOD_SIG, METHOD_SIG)).
query event(evInitiatorCompleted(METHOD_SIG, METHOD_STAT)).
query event(evInitiatorCompleted(METHOD_STAT, METHOD_SIG)).
query event(evInitiatorCompleted(METHOD_STAT, METHOD_STAT)).
query event(evResponderCompleted(METHOD_SIG, METHOD_SIG)).
query event(evResponderCompleted(METHOD_SIG, METHOD_STAT)).
query event(evResponderCompleted(METHOD_STAT, METHOD_SIG)).
query event(evResponderCompleted(METHOD_STAT, METHOD_STAT)).
*)

let initiatorAsym(U: host, V: host, skU: exponent,
     pkU: dhElt, pkV: dhElt, methodI: method, methodR: method) =
  new x[]: exponent; let G_X = exp(g, x) in new S_I[]: bitstring;
  new AD_1[]: bitstring; new C_I[]: ctxID;
  (*
  event startInitiatorSigSig(U, V, G_X, skU, C_I);
   *)
  let msg_1: bitstring = ((methodI, methodR), S_I, G_X, C_I, AD_1) in
  out(c, msg_1);
  in(c, msg_2: bitstring);
  let (data_2: bitstring, CIPHERTEXT_2: bitstring) = msg_2 in

  (* Because we don't model the CORR parameter, we assumme the worst
   * and cover the case that C_I is inlcuded in the message.
   *)
  let (=C_I, G_Y: dhElt, C_R: ctxID) = data_2 in
  let TH_2: bitstring = hash((msg_1, data_2)) in
  let G_XY: dhElt = exp(G_Y, x) in
  let PRK_2e: key = PRK_2e_asym(G_XY) in
  let K_2e: key = K_2e_KDF(PRK_2e, TH_2, aead0) in

  (* CIPHERTEXT_2 contains a COSE_Encrypt0 object. The COSE_Encrypt0 object
   * has three main parts, unprotected headers, protected headers and
   * ciphertext. RFC 8152 is not entirely clear, but it seems as if
   * the protected headers should be part of the AAD for the AEAD.
   *)
   (* The verifObj contains either a MAC_2 or a Signature_2 object *)
  let plainText2:bitstring = xorDecrypt(CIPHERTEXT_2, keyToBitstring(K_2e)) in
  let (=V, verifObj:bitstring, AD_2:bitstring) = plainText2 in
(* KARL: not sure this is in the spec or not. Either way: the spec talks
 * about protection against reflection attacks in Section 8.6, so it should be
 * inlcuded: not allowed for initator to communicate with itself.
 *)
(*
if not (V = U) then
*)

  let G_RX: dhElt = exp(pkV, x) in  (* NOTE: was dummyDHElt if methodR = METHOD_SIG *)
  let PRK_3e2m: key = PRK_3e2m_asym(G_XY, G_RX, methodI, methodR) in
  let K_2m: key = K_2m_KDF(PRK_3e2m, TH_2, aead0) in

  (* MAC_2 covers aadData_2 and the empty string.
   * Signature_2 covers aadData_2 and MAC_2 itself.
   * DIFF: In spec MAC_2 is also computed over a constant "Encrypt0" and the
   * Signature_2 is computed over a constant "Signature1". We ignore that in
   * the model.
   *
   * EDHOC Section 4.3.2 defines the COSE_Encrpt0 objects content:
   * Protected: ID_CRED_R              ==> V in the model's aadData_2
   * external_aad: TH_2, CRED_R, AD_2  ==> (TH_2, pkV, AD_2) aadData_2
   *
   * The following AEAD encryption is the so called "inner COSE_Encrypt0",
   * which is an encryption of the empty string for the only purpose of
   * producing a MAC.
   * We need it both for verifying MAC_2 and for verifying Signature1.
   *)
  let G_IY: dhElt = exp(G_Y, skU) in  (* NOTE: was dummyDHElt if methodI = METHOD_SIG *)
  let protected2: host = V in (* ID_CRED_R in protected header *)
  let extAad2: bitstring = (TH_2, pkV, AD_2) in (* external_aad *)
  let assocData2: bitstring = (protected2, extAad2) in (* Associated data A *)

  (* FEEDBACK: the spec does not specify how to check the signature, depending on
     whether it's using static DH or COSE_Sign *)
  if (methodR = METHOD_SIG && verifyAEADSign(assocData2, verifObj, K_2m, pkV)) ||
     (methodR = METHOD_STAT && verifyAEAD(assocData2, verifObj, K_2m)) then
  (*
  event agreeHashEnd2A(U, V, K_2, aad_2);
  event midInitiatorA(U, V, xE_V);
  *)
  let data_3: ctxID = C_R in
  let TH_3: bitstring = hash((TH_2, CIPHERTEXT_2, data_3)) in
  let PRK_4x3m: key = PRK_4x3m_asym(G_XY, G_RX, G_IY, methodI, methodR) in
  let K_3m: key = K_3m_KDF(PRK_4x3m, TH_3, aead0) in
  new AD_3[]: bitstring;
  let protected3: host = U in  (* ID_CRED_I in protected header *)
  let extAad3: bitstring = (TH_3, pkU, AD_3) in (* external_aad *)
  let assocData3: bitstring = (protected3, extAad3) in (* Associated data A *)
  let MAC_3: bitstring = aeadEncrypt(emptyHexString, K_3m, assocData3) in
  (* authI is the "inner COSE_Encrypt0" object *)
  (* KARL: I tried Alessandro's idea to avoid the else branch in one place
   *       but it only shaved off from 64 seconds to 60 seconds on my machine
   *       while cluttering the model quite a bit.  So we stick with the
   *       else-branch for now and only resort to the else-branch avoidance
   *       if we really have to. So far the speed is acceptable. The idea is:
   *       (if methodI = METHOD_STAT then initiatorAsymEnd(env, sign...)) |
   *       (if methodI = METHOD_SIG then initiatorAsymEnd(env, MAC_3)).
   *       KEEP THIS COMMENT so we/I don't forget the trick.
   *)
  let authI: bitstring = if methodI = METHOD_SIG then
                            sign((assocData3, MAC_3), skU)
                         else if methodI = METHOD_STAT then
                            MAC_3
                         in
  (* Now compute the "outer COSE_Encrypt0" object *)
  let plainText3 = (U, authI, AD_3) in
  let K_3ae: key = K_3ae_KDF(PRK_4x3m, TH_3, aead0) in
  let extAad3_outer = TH_3 in
  let CIPHERTEXT_3: bitstring = aeadEncrypt(plainText3, K_3ae, extAad3_outer) in
  let msg_3: bitstring = (data_3, CIPHERTEXT_3) in

  (* We treat (PRK_4x3m, TH_4) as the session key to be agreed upon *)
  (* let TH_4: bitstring = hash((TH_3, CIPHERTEXT_3)) in    -- unused *)
  event evRunningI(U, V, G_XY, G_IY, G_RX, methodI, methodR);
  out(c, msg_3);

  event evCommitI(U, V, G_XY, G_IY, G_RX, methodI, methodR);
  event evInitiatorCompleted(methodI, methodR); (* Sanity *)
  (* KARL: If attacker injects G_X (and possibly in G_Y, but how did he
   *       forge the signature in that case?), then he knows G_XY, so
   *       both parties must check that G_X and G_Y are not equal to g.
   *       I put the inequality check here at the end rather than when
   *       they receive messages to simplify model.
   *       Proverif has not complained about this yet, but as a pre-caution.
   *       FEEDBACK: don't think this is new in the protocol world, and it
   *                 may already be covered by the spec.
   *)
(*
  if revealSessKey() = true  &&  G_Y <> g  &&  G_X <> g
                             && G_RX <> dummyDhElt &&  G_IY <> dummyDhElt then
*)
   in(c, =G_XY); event evKG_XYIAsym(U, V, G_XY); event evKG_XYIReachAsym.
(*
     KARL: y not known to initiator and x not to responder.
           G_IY and G_RX were proven not reachable.
     TODO: think about how to model this. Related to authentication and
           agreement of session key (maybe?)

        ((in(c, =y); event evKG_IYIAsym(U, V, G_XY, G_IY); event evKG_XYIReachAsym) |
         (in(c, =x); event evKG_RXIAsym(U, V, G_XY, G_RX); event evKG_XYIReachAsym))))
*)

let responderAsym(V: host, U: host, skV: exponent, pkV: dhElt, pkU: dhElt) =
  new y[]: exponent;
  let G_Y: dhElt = exp(g, y) in
  new S_R[]: bitstring;
  new C_R[]: bitstring;
  (*
  event startResponderA(U, V, E_V, skV, C_U);
   *)
  in(c, msg_1: bitstring);
  let ((methodI: method, methodR: method), S_I: bitstring, G_X: dhElt, C_I: ctxID, AD_1: bitstring) = msg_1 in
  (* DIFF: model does not send an error message back if R does not support
   * the proposed ciphersuite.  Instead the model just halts.
   *)
  if IandRSupportSameCiphersuite() = true then
  let data_2: bitstring = (C_I, G_Y, C_R) in
  let TH_2: bitstring = hash((msg_1, data_2)) in

(* KARL: To avoid reflection attacks. Search for comment on reflection
 * attacks at the initiator for more info.
 *)
(*
if not (pkU = pkV) then
*)

(* KARL: When initiator uses static method, we get no identity hiding at all
 *       becase responder needs public key.
 * FEEDBACK: question: how did responder know which public key to use?
 *                     Message 1 does not contain any hints, does it?
 *)

(* KARL: when responder uses static key, then the protocol does not seem
 *       able to guarnetee agreement on G_IY.
 *)
  let G_IY: dhElt = exp(pkU, y) in (* NOTE: was dummyDHElt if methodI = METHOD_SIG *)
  let G_RX: dhElt = exp(G_X, skV) in (* NOTE: was dummyDHElt if methodR = METHOD_SIG *)
  let G_XY: dhElt = exp(G_X, y) in
  let PRK_3e2m: key = PRK_3e2m_asym(G_XY, G_RX, methodI, methodR) in
  let K_2m: key = K_2m_KDF(PRK_3e2m, TH_2, aead0) in
  new AD_2: bitstring;
  let protected2: host = V in (* ID_CRED_R in protected header *)

(* KARL:  Protocol weakness.

Problem: does not provide explicit key authentication when
Initiator I is using STAT credentials. Assume two initiators I and I'.
One responder R.

only including the necessary information elements the problem is the
follwoing:

I -> R: g^x
I'-> R: g^x'
R -> I: (g^I')^y    // This is G_IY where the attacker has switched the receivers
                    // I and I'.

Start/Running event at R may be based on (g^I')^y.
End/Commit event at I is based on (g^I)^y.

Initiator I will not detect this because he does not verify any computation
based on (g^I')^y. That value just goes into session key derivations and into
key derivations for message 3.
The responder may detetct the mismatch when receiving message 3
but at that point the Initiator has already completed the protocol assuming
it went well. So the attacker made I accept without a matching partner.

Solution(s) If one is willing to provide the responder with the public key
of the initator:
 - It is probably possible to prove implicit key authentication, along the lines:
   If I accepts run presumably with R and there is someone else who calculates
   the same session key, then that someone else must be R.
 - Fix EDHOC by giving the Initiator something to verify in message 2 that
   depends on its own public key. Several options. Here are some simple ones:
    - Include G_IY in the transcript hash TH_2. (After AEAD was changed to
      XOR encryption there is no longer a reason to not inlcude the information
      in message 2 in TH_2.)
    - Include G_IY in external_aad in message 2.
   Both these options will make the keys to protect message 2 dependent on
   I s public key. This means that when I veriies the MAC_2, the verification
   will now fail if the responder/attacker had sent the Initiator a message
   with (g^I')^y.

Solution if one want Initiator identity hiding:
 - Show implicit authentication instead for explicit.
*)
  let extAad2: bitstring = (TH_2, pkV, AD_2) in (* external_aad *)
  let assocData2: bitstring = (protected2, extAad2) in (* Associated data A *)
  (* TODO: assocData2 should map to arrays of COSE structs similar to spec *)
  let MAC_2: bitstring = aeadEncrypt(emptyHexString, K_2m, assocData2) in
  let authR: bitstring = if methodR = METHOD_SIG then
                            sign((assocData2, MAC_2), skV)
                         else if methodR = METHOD_STAT then
                            MAC_2
                         in
  let plainText2: bitstring = (V, authR, AD_2) in
  let PRK_2e: key = PRK_2e_asym(G_XY) in
  let K_2e: key = K_2e_KDF(PRK_2e, TH_2, aead0) in
  let CIPHERTEXT_2: bitstring = xorEncrypt(plainText2, keyToBitstring(K_2e)) in
  let msg_2: bitstring = (data_2, CIPHERTEXT_2) in
(* event agreeHashStart2A(U, V, K_2, aad_2, skV); *)
  event evRunningR(V, G_XY, G_IY, G_RX, methodI, methodR);
  out(c, msg_2);
  in(c, msg_3: bitstring);
  let (data_3: bitstring, CIPHERTEXT_3: bitstring) = msg_3 in
  let (=C_R) = data_3 in
  let TH_3: bitstring = hash((TH_2, CIPHERTEXT_2, data_3)) in
  let PRK_4x3m: key = PRK_4x3m_asym(G_XY, G_RX, G_IY, methodI, methodR) in
  let K_3ae: key = K_3ae_KDF(PRK_4x3m, TH_3, aead0) in
  let extAad3_outer: bitstring = TH_3 in
  let plainText3: bitstring = aeadDecrypt(CIPHERTEXT_3, K_3ae, extAad3_outer) in
  let (=U, verifObj: bitstring, AD_3: bitstring) = plainText3 in
  let K_3m: key = K_3m_KDF(PRK_4x3m, TH_3, aead0) in
  let protected3: host = U in (* ID_CRED_I in protected header *)
  let extAad3: bitstring = (TH_3, pkU, AD_3) in (* external_aad *)
  let assocData3: bitstring = (protected3, extAad3) in (* Associated data A *)
  if (methodI = METHOD_SIG && verifyAEADSign(assocData3, verifObj, K_3m, pkU)) ||
     (methodI = METHOD_STAT && verifyAEAD(assocData3, verifObj, K_3m)) then
  (* let TH_4: bitstring = hash((TH_3, CIPHERTEXT_3)) in    -- unused *)

  event evCommitR(U, V, G_XY, G_IY, G_RX, methodI, methodR);
  event evResponderCompleted(methodI, methodR); (* Sanity *)
  in(c, =G_XY); event evKG_XYRAsym(U, V, G_XY); event evKG_XYRReachAsym.
(*
     KARL: y not known to initiator and x not to responder.
           G_IY and G_RX were proven not reachable.
     TODO: think about how to model this. Related to authentication and
           agreement of session key (maybe?)
     (if revealSessState() = true then
        ((in(c, =y); event evKG_IYR(U, V, G_XY, G_IY); event evKG_XYRReachAsym) |
         (in(c, =x); event evKG_RXR(U, V, G_XY, G_RX); event evKG_XYRReachAsym)))
*)


let initiatorSym(U: host, V: host, PSK: key, ID_PSK: bitstring) =
  new x: exponent;
  let E_U: dhElt = exp(g, x) in
  new C_I: ctxID;
  new S_I: bitstring;
  new AD_1: bitstring;
  new AD_3: bitstring;
  new Mc: bitstring;
  event startInitiatorS(U, V, PSK, E_U);
  let msg_1: bitstring = (Mc, S_I, E_U, C_I, ID_PSK, AD_1) in
  out(c, msg_1);
  (* event evInitiatorStarted; *)
  in(c, msg_2: bitstring);
  let (data_2: bitstring, COSE_enc_2: bitstring) = msg_2 in
  let (=C_I, xE_V: dhElt, xC_R: ctxID) = data_2 in
  let TH_2: bitstring = hash((msg_1, data_2)) in
  let G_XY: dhElt = exp(xE_V, x) in
  let PRK_2e: key = PRK_2e_sym(PSK, G_XY) in
  let K_2: key = K_2e_KDF(PRK_2e, TH_2, aead0) in (* ALE: using a default ciphersuite *)
  let aad_2: bitstring = (emptyHexString, TH_2) in
  let AD_2: bitstring = aeadDecrypt(COSE_enc_2, K_2, aad_2) in
  event midInitiatorS(U, V, PSK, xE_V);
  let data_3: ctxID = xC_R in
  let TH_3: bitstring = hash((hash((msg_1, msg_2)), data_3)) in
  let aad_3: bitstring = (emptyHexString, TH_3) in
  let PRK_3e2m: key = PRK_3e2m_sym(PSK, G_XY) in
  let K_3: key = K_3ae_KDF(PRK_3e2m, TH_3, aead0) in
  let COSE_enc_3: bitstring = aeadEncrypt(AD_3, K_3, aad_3) in
  let msg_3: bitstring = (data_3, COSE_enc_3) in
  let TH_4: bitstring = hash((TH_3, COSE_enc_3)) in
  event evRunningISym(U, V, ID_PSK, G_XY, C_I, xC_R, S_I);
  out(c, msg_3);
  (* event endInitiatorS(U, V, PSK, xE_V); *)
  event evCompletedISym();
  event evCommitISym(U, V, ID_PSK, G_XY, C_I, xC_R, S_I);
  in(c, =G_XY); event evKG_XYISym(U, V, G_XY); event evKG_XYIReachSym.

let responderSym(V: host, U: host, PSK: key, ID_PSK: bitstring) =
  new y: exponent;
  let E_V: dhElt = exp(g, y) in
  new C_R: ctxID;
  new AD_2: bitstring;
  new AD_2': bitstring;
  event startResponderS(U, V, PSK, E_V);
  in(c, msg_1: bitstring);
  (* event evResponderStarted; *)
  let (Mc: bitstring, xS_I: bitstring, xE_U: dhElt, xC_I: ctxID, =ID_PSK, AD_1: bitstring) = msg_1 in
  if IandRSupportSameCiphersuite() = true then
  let data_2: bitstring = (xC_I, E_V, C_R) in
  let TH_2: bitstring = hash((msg_1, data_2)) in
  let G_XY: dhElt = exp(xE_U, y) in
  let PRK_2e: key = PRK_2e_sym(PSK, G_XY) in
  let K_2: key = K_2e_KDF(PRK_2e, TH_2, aead0) in (* ALE: using a default ciphersuite *)
  let aad_2: bitstring = (emptyHexString, TH_2) in
  let COSE_enc_2: bitstring = aeadEncrypt(AD_2, K_2, aad_2) in
  let msg_2: bitstring = (data_2, COSE_enc_2) in
	  (* event evStart((U, V, PRK_2e)); *)  (* KARL: I removed this to be able to compile *)
  event evRunningRSym(U, V, ID_PSK, G_XY, xC_I, C_R, xS_I);
  out(c, msg_2);
  in(c, msg_3: bitstring);
  let (=C_R, COSE_enc_3: bitstring) = msg_3 in
  let TH_3: bitstring = hash((hash((msg_1, msg_2)), C_R)) in
  let PRK_3e2m: key = PRK_3e2m_sym(PSK, G_XY) in
  let K_3: key = K_3ae_KDF(PRK_3e2m, TH_3, aead0) in
  let aad_3: bitstring = (emptyHexString, TH_3) in
  let AD_3: bitstring = aeadDecrypt(COSE_enc_3, K_3, aad_3) in
  let TH_4: bitstring = hash((TH_3, COSE_enc_3)) in
  event evCommitRSym(U, V, ID_PSK, G_XY, xC_I, C_R, xS_I);
  event evCompletedRSym();
  event endResponderS(U, V, PSK, xE_U);
  in(c, =G_XY); event evKG_XYRSym(U, V, G_XY); event evKG_XYRReachSym.


(*
  event agreeHashEnd3A(U, V, K_3, aad_3);
  event endResponderA(U, V, xE_U);
*)

process
  (!new U: host;              (* In EDHOC: ID_CRED_R or ID_CRED_I *)
    new skU: exponent;        (* private key *)
    let pkU = exp(g, skU) in  (* In EDHOC: CRED_R or CRED_I *)
    (!out(s, (U, skU, pkU))) | out(c, (pkU)) |
    (if maliciousPrincipals() then event evLTKRevealAsym(U); out(c, skU))
  ) |
  (
   !in(s, (U:host, skU:exponent, pkU:dhElt));
    in(s, (V:host, skV:exponent, pkV:dhElt));
    new ID_PSK: bitstring;
    new PSK: key;
    out(s2, (U, V, PSK, ID_PSK));
    (if maliciousPrincipals() then event evLTKRevealSym(U); event evLTKRevealSym(V); out(c, PSK))
  ) |
  (
   !in(s, (methodI:method, methodR:method));
    in(s, (U:host, skU:exponent, pkU:dhElt));
    in(s, (V:host, skV:exponent, pkV:dhElt));
    initiatorAsym(U, V, skU, pkU, pkV, methodI, methodR) |
    responderAsym(V, U, skV, pkV, pkU)
  ) |
  (
   !in(s2, (U:host, V:host, PSK: key, ID_PSK: bitstring));
    initiatorSym(U, V, PSK, ID_PSK) | responderSym(V, U, PSK, ID_PSK)
  ) |
 !(
    out(s, (METHOD_SIG, METHOD_SIG))  |
    out(s, (METHOD_SIG, METHOD_STAT)) |
    out(s, (METHOD_STAT, METHOD_SIG)) |
    out(s, (METHOD_STAT, METHOD_STAT))
  )

